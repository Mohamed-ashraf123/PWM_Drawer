
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001794  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00001794  00001828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000a8  008000a8  00001870  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f2  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c60  00000000  00000000  00003e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001274  00000000  00000000  00004ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00005d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c35  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015a6  00000000  00000000  00006db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000835f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	f0 04       	cpc	r15, r0
      56:	73 05       	cpc	r23, r3
      58:	73 05       	cpc	r23, r3
      5a:	73 05       	cpc	r23, r3
      5c:	73 05       	cpc	r23, r3
      5e:	cf 04       	cpc	r12, r15
      60:	73 05       	cpc	r23, r3
      62:	73 05       	cpc	r23, r3
      64:	73 05       	cpc	r23, r3
      66:	73 05       	cpc	r23, r3
      68:	73 05       	cpc	r23, r3
      6a:	73 05       	cpc	r23, r3
      6c:	73 05       	cpc	r23, r3
      6e:	fb 04       	cpc	r15, r11
      70:	e5 04       	cpc	r14, r5
      72:	73 05       	cpc	r23, r3
      74:	06 05       	cpc	r16, r6
      76:	11 05       	cpc	r17, r1
      78:	1c 05       	cpc	r17, r12
      7a:	27 05       	cpc	r18, r7
      7c:	32 05       	cpc	r19, r2
      7e:	3d 05       	cpc	r19, r13
      80:	48 05       	cpc	r20, r8
      82:	53 05       	cpc	r21, r3
      84:	5e 05       	cpc	r21, r14
      86:	69 05       	cpc	r22, r9
      88:	73 05       	cpc	r23, r3
      8a:	73 05       	cpc	r23, r3
      8c:	73 05       	cpc	r23, r3
      8e:	da 04       	cpc	r13, r10
      90:	73 05       	cpc	r23, r3
      92:	73 05       	cpc	r23, r3
      94:	73 05       	cpc	r23, r3
      96:	b1 03       	fmuls	r19, r17
      98:	bc 03       	fmulsu	r19, r20
      9a:	c7 03       	fmuls	r20, r23
      9c:	d2 03       	fmuls	r21, r18
      9e:	dd 03       	fmulsu	r21, r21
      a0:	e8 03       	fmulsu	r22, r16
      a2:	f3 03       	fmuls	r23, r19
      a4:	fe 03       	fmulsu	r23, r22
      a6:	09 04       	cpc	r0, r9
      a8:	14 04       	cpc	r1, r4
      aa:	1f 04       	cpc	r1, r15
      ac:	2a 04       	cpc	r2, r10
      ae:	35 04       	cpc	r3, r5
      b0:	40 04       	cpc	r4, r0
      b2:	4b 04       	cpc	r4, r11
      b4:	56 04       	cpc	r5, r6
      b6:	61 04       	cpc	r6, r1
      b8:	6c 04       	cpc	r6, r12
      ba:	77 04       	cpc	r7, r7
      bc:	82 04       	cpc	r8, r2
      be:	8d 04       	cpc	r8, r13
      c0:	98 04       	cpc	r9, r8
      c2:	a3 04       	cpc	r10, r3
      c4:	ae 04       	cpc	r10, r14
      c6:	b9 04       	cpc	r11, r9
      c8:	c4 04       	cpc	r12, r4
      ca:	73 05       	cpc	r23, r3
      cc:	73 05       	cpc	r23, r3
      ce:	73 05       	cpc	r23, r3
      d0:	73 05       	cpc	r23, r3
      d2:	73 05       	cpc	r23, r3
      d4:	73 05       	cpc	r23, r3
      d6:	b1 03       	fmuls	r19, r17
      d8:	bc 03       	fmulsu	r19, r20
      da:	c7 03       	fmuls	r20, r23
      dc:	d2 03       	fmuls	r21, r18
      de:	dd 03       	fmulsu	r21, r21
      e0:	e8 03       	fmulsu	r22, r16
      e2:	f3 03       	fmuls	r23, r19
      e4:	fe 03       	fmulsu	r23, r22
      e6:	09 04       	cpc	r0, r9
      e8:	14 04       	cpc	r1, r4
      ea:	1f 04       	cpc	r1, r15
      ec:	2a 04       	cpc	r2, r10
      ee:	35 04       	cpc	r3, r5
      f0:	40 04       	cpc	r4, r0
      f2:	4b 04       	cpc	r4, r11
      f4:	56 04       	cpc	r5, r6
      f6:	61 04       	cpc	r6, r1
      f8:	6c 04       	cpc	r6, r12
      fa:	77 04       	cpc	r7, r7
      fc:	82 04       	cpc	r8, r2
      fe:	8d 04       	cpc	r8, r13
     100:	98 04       	cpc	r9, r8
     102:	a3 04       	cpc	r10, r3
     104:	ae 04       	cpc	r10, r14
     106:	b9 04       	cpc	r11, r9
     108:	c4 04       	cpc	r12, r4
     10a:	d9 08       	sbc	r13, r9
     10c:	d9 08       	sbc	r13, r9
     10e:	dd 08       	sbc	r13, r13
     110:	e1 08       	sbc	r14, r1
     112:	e5 08       	sbc	r14, r5
     114:	e9 08       	sbc	r14, r9
     116:	ed 08       	sbc	r14, r13
     118:	ed 08       	sbc	r14, r13

0000011a <__ctors_end>:
     11a:	11 24       	eor	r1, r1
     11c:	1f be       	out	0x3f, r1	; 63
     11e:	cf e5       	ldi	r28, 0x5F	; 95
     120:	d8 e0       	ldi	r29, 0x08	; 8
     122:	de bf       	out	0x3e, r29	; 62
     124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	a0 e6       	ldi	r26, 0x60	; 96
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e4 e9       	ldi	r30, 0x94	; 148
     12e:	f7 e1       	ldi	r31, 0x17	; 23
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
     132:	05 90       	lpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a8 3a       	cpi	r26, 0xA8	; 168
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	a8 ea       	ldi	r26, 0xA8	; 168
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	ab 3a       	cpi	r26, 0xAB	; 171
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <main>
     150:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <PWMDrawer_Init>:



void PWMDrawer_Init(void) {

	GLCD_init();
     158:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <GLCD_init>
	GLCD_ClearDisplay();
     15c:	0e 94 54 06 	call	0xca8	; 0xca8 <GLCD_ClearDisplay>
	PWM_Init(&PWM_Setup[0]);		// Use Timer 0 to generate PWM on OC0=PB3
     160:	8c e9       	ldi	r24, 0x9C	; 156
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 b4 08 	call	0x1168	; 0x1168 <PWM_Init>
	ICU_Init(&ICU_SetUp);			// Timer 1 is used for Input Capture to get the PWM Signal
     168:	83 ea       	ldi	r24, 0xA3	; 163
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <ICU_Init>
     170:	08 95       	ret

00000172 <PWM_MeasureSignal>:
}

void PWM_MeasureSignal(PWM_Signal_SetUp* PWM_ptr) {
     172:	8f 92       	push	r8
     174:	9f 92       	push	r9
     176:	af 92       	push	r10
     178:	bf 92       	push	r11
     17a:	cf 92       	push	r12
     17c:	df 92       	push	r13
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	28 97       	sbiw	r28, 0x08	; 8
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	de bf       	out	0x3e, r29	; 62
     196:	0f be       	out	0x3f, r0	; 63
     198:	cd bf       	out	0x3d, r28	; 61
     19a:	8c 01       	movw	r16, r24
	ICU_DutyCycleType Duty_Cycle_EXM = {0, 0};
     19c:	19 82       	std	Y+1, r1	; 0x01
     19e:	1a 82       	std	Y+2, r1	; 0x02
     1a0:	1b 82       	std	Y+3, r1	; 0x03
     1a2:	1c 82       	std	Y+4, r1	; 0x04
     1a4:	1d 82       	std	Y+5, r1	; 0x05
     1a6:	1e 82       	std	Y+6, r1	; 0x06
     1a8:	1f 82       	std	Y+7, r1	; 0x07
     1aa:	18 86       	std	Y+8, r1	; 0x08
	ICU_GetDutyCycle(ICU_TIMER_1, 8U, &Duty_Cycle_EXM);
     1ac:	ae 01       	movw	r20, r28
     1ae:	4f 5f       	subi	r20, 0xFF	; 255
     1b0:	5f 4f       	sbci	r21, 0xFF	; 255
     1b2:	68 e0       	ldi	r22, 0x08	; 8
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0e 94 0d 08 	call	0x101a	; 0x101a <ICU_GetDutyCycle>
	PWM_ptr->Period_Time_ms = Duty_Cycle_EXM.Period_Time;
     1bc:	cd 80       	ldd	r12, Y+5	; 0x05
     1be:	de 80       	ldd	r13, Y+6	; 0x06
     1c0:	ef 80       	ldd	r14, Y+7	; 0x07
     1c2:	f8 84       	ldd	r15, Y+8	; 0x08
     1c4:	f8 01       	movw	r30, r16
     1c6:	c1 86       	std	Z+9, r12	; 0x09
     1c8:	d2 86       	std	Z+10, r13	; 0x0a
     1ca:	e3 86       	std	Z+11, r14	; 0x0b
     1cc:	f4 86       	std	Z+12, r15	; 0x0c
	PWM_ptr->High_Time_ms = Duty_Cycle_EXM.High_Time;
     1ce:	89 80       	ldd	r8, Y+1	; 0x01
     1d0:	9a 80       	ldd	r9, Y+2	; 0x02
     1d2:	ab 80       	ldd	r10, Y+3	; 0x03
     1d4:	bc 80       	ldd	r11, Y+4	; 0x04
     1d6:	81 82       	std	Z+1, r8	; 0x01
     1d8:	92 82       	std	Z+2, r9	; 0x02
     1da:	a3 82       	std	Z+3, r10	; 0x03
     1dc:	b4 82       	std	Z+4, r11	; 0x04
	
	PWM_ptr->Freq_kHz = (1.0 / (PWM_ptr->Period_Time_ms));
     1de:	a7 01       	movw	r20, r14
     1e0:	96 01       	movw	r18, r12
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	80 e8       	ldi	r24, 0x80	; 128
     1e8:	9f e3       	ldi	r25, 0x3F	; 63
     1ea:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
     1ee:	f8 01       	movw	r30, r16
     1f0:	65 87       	std	Z+13, r22	; 0x0d
     1f2:	76 87       	std	Z+14, r23	; 0x0e
     1f4:	87 87       	std	Z+15, r24	; 0x0f
     1f6:	90 8b       	std	Z+16, r25	; 0x10
	PWM_ptr->Duty_Percent = (u8)((PWM_ptr->High_Time_ms) * 100.0 / (PWM_ptr->Period_Time_ms));
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	48 ec       	ldi	r20, 0xC8	; 200
     1fe:	52 e4       	ldi	r21, 0x42	; 66
     200:	c5 01       	movw	r24, r10
     202:	b4 01       	movw	r22, r8
     204:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__mulsf3>
     208:	a7 01       	movw	r20, r14
     20a:	96 01       	movw	r18, r12
     20c:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
     210:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
     214:	f8 01       	movw	r30, r16
     216:	60 83       	st	Z, r22
}
     218:	28 96       	adiw	r28, 0x08	; 8
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	f8 94       	cli
     21e:	de bf       	out	0x3e, r29	; 62
     220:	0f be       	out	0x3f, r0	; 63
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	bf 90       	pop	r11
     236:	af 90       	pop	r10
     238:	9f 90       	pop	r9
     23a:	8f 90       	pop	r8
     23c:	08 95       	ret

0000023e <PWM_DrawSignal>:

void PWM_DrawSignal(PWM_Signal_SetUp* Signal_Data_Ptr, f32 Scale_ms) {
     23e:	af 92       	push	r10
     240:	bf 92       	push	r11
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	ec 97       	sbiw	r28, 0x3c	; 60
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	5c 01       	movw	r10, r24
     264:	6a 01       	movw	r12, r20
     266:	7b 01       	movw	r14, r22
	
	//Clear anything on the display at first
	GLCD_ClearDisplay();
     268:	0e 94 54 06 	call	0xca8	; 0xca8 <GLCD_ClearDisplay>
	
	
	// Display  Frequency on Line 0
	
	GLCD_GoToLine(0);
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	0e 94 40 06 	call	0xc80	; 0xc80 <GLCD_GoToLine>
	char FreqKHz[15] = "Freq=\0";
     272:	87 e0       	ldi	r24, 0x07	; 7
     274:	e0 e6       	ldi	r30, 0x60	; 96
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	de 01       	movw	r26, r28
     27a:	11 96       	adiw	r26, 0x01	; 1
     27c:	01 90       	ld	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	8a 95       	dec	r24
     282:	e1 f7       	brne	.-8      	; 0x27c <PWM_DrawSignal+0x3e>
     284:	18 e0       	ldi	r17, 0x08	; 8
     286:	fe 01       	movw	r30, r28
     288:	38 96       	adiw	r30, 0x08	; 8
     28a:	df 01       	movw	r26, r30
     28c:	81 2f       	mov	r24, r17
     28e:	1d 92       	st	X+, r1
     290:	8a 95       	dec	r24
     292:	e9 f7       	brne	.-6      	; 0x28e <PWM_DrawSignal+0x50>
	GLCD_DisplayString(FreqKHz);
     294:	ce 01       	movw	r24, r28
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	0e 94 91 05 	call	0xb22	; 0xb22 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
     29c:	d5 01       	movw	r26, r10
     29e:	1d 96       	adiw	r26, 0x0d	; 13
     2a0:	6d 91       	ld	r22, X+
     2a2:	7d 91       	ld	r23, X+
     2a4:	8d 91       	ld	r24, X+
     2a6:	9c 91       	ld	r25, X
     2a8:	50 97       	sbiw	r26, 0x10	; 16
     2aa:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GLCD_DisplayFloatingPoint>
	char KHz[5] = " kHz\0";
     2ae:	85 e0       	ldi	r24, 0x05	; 5
     2b0:	e7 e9       	ldi	r30, 0x97	; 151
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	de 01       	movw	r26, r28
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	01 90       	ld	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	8a 95       	dec	r24
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <PWM_DrawSignal+0x7a>
	GLCD_DisplayString(KHz);
     2c0:	ce 01       	movw	r24, r28
     2c2:	40 96       	adiw	r24, 0x10	; 16
     2c4:	0e 94 91 05 	call	0xb22	; 0xb22 <GLCD_DisplayString>

	// Display Duty cycle percentage on line 2
	
	GLCD_GoToLine(2);
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	0e 94 40 06 	call	0xc80	; 0xc80 <GLCD_GoToLine>
	char Duty_Val[15] = "Duty=\0";
     2ce:	87 e0       	ldi	r24, 0x07	; 7
     2d0:	ef e6       	ldi	r30, 0x6F	; 111
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	de 01       	movw	r26, r28
     2d6:	55 96       	adiw	r26, 0x15	; 21
     2d8:	01 90       	ld	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	8a 95       	dec	r24
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <PWM_DrawSignal+0x9a>
     2e0:	fe 01       	movw	r30, r28
     2e2:	7c 96       	adiw	r30, 0x1c	; 28
     2e4:	df 01       	movw	r26, r30
     2e6:	81 2f       	mov	r24, r17
     2e8:	1d 92       	st	X+, r1
     2ea:	8a 95       	dec	r24
     2ec:	e9 f7       	brne	.-6      	; 0x2e8 <PWM_DrawSignal+0xaa>
	GLCD_DisplayString(Duty_Val);
     2ee:	ce 01       	movw	r24, r28
     2f0:	45 96       	adiw	r24, 0x15	; 21
     2f2:	0e 94 91 05 	call	0xb22	; 0xb22 <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
     2f6:	d5 01       	movw	r26, r10
     2f8:	6c 91       	ld	r22, X
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GLCD_DisplayInteger>
	char Percent[5] = " %\0";
     304:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
     308:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
     30c:	9d a3       	std	Y+37, r25	; 0x25
     30e:	8c a3       	std	Y+36, r24	; 0x24
     310:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     314:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     318:	9f a3       	std	Y+39, r25	; 0x27
     31a:	8e a3       	std	Y+38, r24	; 0x26
     31c:	18 a6       	std	Y+40, r1	; 0x28
	GLCD_DisplayString(Percent);
     31e:	ce 01       	movw	r24, r28
     320:	84 96       	adiw	r24, 0x24	; 36
     322:	0e 94 91 05 	call	0xb22	; 0xb22 <GLCD_DisplayString>


	/* Display Time in ms on Line 4 */
	
	GLCD_GoToLine(4);
     326:	84 e0       	ldi	r24, 0x04	; 4
     328:	0e 94 40 06 	call	0xc80	; 0xc80 <GLCD_GoToLine>
	char Time_in_ms[15] = "Time=\0";
     32c:	87 e0       	ldi	r24, 0x07	; 7
     32e:	e3 e8       	ldi	r30, 0x83	; 131
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	de 01       	movw	r26, r28
     334:	99 96       	adiw	r26, 0x29	; 41
     336:	01 90       	ld	r0, Z+
     338:	0d 92       	st	X+, r0
     33a:	8a 95       	dec	r24
     33c:	e1 f7       	brne	.-8      	; 0x336 <PWM_DrawSignal+0xf8>
     33e:	fe 01       	movw	r30, r28
     340:	f0 96       	adiw	r30, 0x30	; 48
     342:	df 01       	movw	r26, r30
     344:	1d 92       	st	X+, r1
     346:	1a 95       	dec	r17
     348:	e9 f7       	brne	.-6      	; 0x344 <PWM_DrawSignal+0x106>
	GLCD_DisplayString(Time_in_ms);
     34a:	ce 01       	movw	r24, r28
     34c:	89 96       	adiw	r24, 0x29	; 41
     34e:	0e 94 91 05 	call	0xb22	; 0xb22 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
     352:	f5 01       	movw	r30, r10
     354:	61 85       	ldd	r22, Z+9	; 0x09
     356:	72 85       	ldd	r23, Z+10	; 0x0a
     358:	83 85       	ldd	r24, Z+11	; 0x0b
     35a:	94 85       	ldd	r25, Z+12	; 0x0c
     35c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GLCD_DisplayFloatingPoint>
	char milisecs[5] = "ms\0";
     360:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__DATA_REGION_ORIGIN__+0x32>
     364:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__DATA_REGION_ORIGIN__+0x33>
     368:	99 af       	std	Y+57, r25	; 0x39
     36a:	88 af       	std	Y+56, r24	; 0x38
     36c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
     370:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     374:	9b af       	std	Y+59, r25	; 0x3b
     376:	8a af       	std	Y+58, r24	; 0x3a
     378:	1c ae       	std	Y+60, r1	; 0x3c
	GLCD_DisplayString(milisecs);
     37a:	ce 01       	movw	r24, r28
     37c:	c8 96       	adiw	r24, 0x38	; 56
     37e:	0e 94 91 05 	call	0xb22	; 0xb22 <GLCD_DisplayString>
	
	
	/* Display PWM  Signal from Line 6 */
	
	GLCD_GoToLine(6);
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	0e 94 40 06 	call	0xc80	; 0xc80 <GLCD_GoToLine>
	u8 pixel_width_count = 0;
     388:	10 e0       	ldi	r17, 0x00	; 0
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
     38a:	4e c0       	rjmp	.+156    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
     38c:	20 e4       	ldi	r18, 0x40	; 64
     38e:	30 e4       	ldi	r19, 0x40	; 64
     390:	4e e7       	ldi	r20, 0x7E	; 126
     392:	52 e0       	ldi	r21, 0x02	; 2
     394:	62 e0       	ldi	r22, 0x02	; 2
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     3a0:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	0c c0       	rjmp	.+24     	; 0x3be <PWM_DrawSignal+0x180>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
     3a6:	22 e0       	ldi	r18, 0x02	; 2
     3a8:	32 e0       	ldi	r19, 0x02	; 2
     3aa:	42 e0       	ldi	r20, 0x02	; 2
     3ac:	52 e0       	ldi	r21, 0x02	; 2
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     3ba:	1b 5f       	subi	r17, 0xFB	; 251
	GLCD_GoToLine(6);
	u8 pixel_width_count = 0;
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
     3bc:	0f 5f       	subi	r16, 0xFF	; 255
     3be:	d5 01       	movw	r26, r10
     3c0:	11 96       	adiw	r26, 0x01	; 1
     3c2:	6d 91       	ld	r22, X+
     3c4:	7d 91       	ld	r23, X+
     3c6:	8d 91       	ld	r24, X+
     3c8:	9c 91       	ld	r25, X
     3ca:	14 97       	sbiw	r26, 0x04	; 4
     3cc:	a7 01       	movw	r20, r14
     3ce:	96 01       	movw	r18, r12
     3d0:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
     3d4:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
     3d8:	06 17       	cp	r16, r22
     3da:	28 f3       	brcs	.-54     	; 0x3a6 <PWM_DrawSignal+0x168>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
     3dc:	22 e0       	ldi	r18, 0x02	; 2
     3de:	32 e0       	ldi	r19, 0x02	; 2
     3e0:	4e e7       	ldi	r20, 0x7E	; 126
     3e2:	50 e4       	ldi	r21, 0x40	; 64
     3e4:	60 e4       	ldi	r22, 0x40	; 64
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     3f0:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	0c c0       	rjmp	.+24     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
     3f6:	20 e4       	ldi	r18, 0x40	; 64
     3f8:	30 e4       	ldi	r19, 0x40	; 64
     3fa:	40 e4       	ldi	r20, 0x40	; 64
     3fc:	50 e4       	ldi	r21, 0x40	; 64
     3fe:	60 e4       	ldi	r22, 0x40	; 64
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     40a:	1b 5f       	subi	r17, 0xFB	; 251
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
     40c:	0f 5f       	subi	r16, 0xFF	; 255
     40e:	f5 01       	movw	r30, r10
     410:	65 81       	ldd	r22, Z+5	; 0x05
     412:	76 81       	ldd	r23, Z+6	; 0x06
     414:	87 81       	ldd	r24, Z+7	; 0x07
     416:	90 85       	ldd	r25, Z+8	; 0x08
     418:	a7 01       	movw	r20, r14
     41a:	96 01       	movw	r18, r12
     41c:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
     420:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
     424:	06 17       	cp	r16, r22
     426:	38 f3       	brcs	.-50     	; 0x3f6 <PWM_DrawSignal+0x1b8>
	/* Display PWM  Signal from Line 6 */
	
	GLCD_GoToLine(6);
	u8 pixel_width_count = 0;
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
     428:	18 37       	cpi	r17, 0x78	; 120
     42a:	08 f4       	brcc	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42c:	af cf       	rjmp	.-162    	; 0x38c <PWM_DrawSignal+0x14e>
		}
	}
	
	/* Display Arrow for Time Period */
	
	GLCD_GoToLine(5);
     42e:	85 e0       	ldi	r24, 0x05	; 5
     430:	0e 94 40 06 	call	0xc80	; 0xc80 <GLCD_GoToLine>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	3e e3       	ldi	r19, 0x3E	; 62
     438:	48 e0       	ldi	r20, 0x08	; 8
     43a:	5c e1       	ldi	r21, 0x1C	; 28
     43c:	6a e2       	ldi	r22, 0x2A	; 42
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
     448:	10 e0       	ldi	r17, 0x00	; 0
     44a:	0b c0       	rjmp	.+22     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     44c:	28 e0       	ldi	r18, 0x08	; 8
     44e:	38 e0       	ldi	r19, 0x08	; 8
     450:	48 e0       	ldi	r20, 0x08	; 8
     452:	58 e0       	ldi	r21, 0x08	; 8
     454:	68 e0       	ldi	r22, 0x08	; 8
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
	
	/* Display Arrow for Time Period */
	
	GLCD_GoToLine(5);
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
     460:	1f 5f       	subi	r17, 0xFF	; 255
     462:	d5 01       	movw	r26, r10
     464:	11 96       	adiw	r26, 0x01	; 1
     466:	6d 91       	ld	r22, X+
     468:	7d 91       	ld	r23, X+
     46a:	8d 91       	ld	r24, X+
     46c:	9c 91       	ld	r25, X
     46e:	14 97       	sbiw	r26, 0x04	; 4
     470:	a7 01       	movw	r20, r14
     472:	96 01       	movw	r18, r12
     474:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
     478:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
     47c:	16 17       	cp	r17, r22
     47e:	30 f3       	brcs	.-52     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     480:	28 e0       	ldi	r18, 0x08	; 8
     482:	38 e0       	ldi	r19, 0x08	; 8
     484:	48 e0       	ldi	r20, 0x08	; 8
     486:	58 e0       	ldi	r21, 0x08	; 8
     488:	68 e0       	ldi	r22, 0x08	; 8
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
     494:	10 e0       	ldi	r17, 0x00	; 0
     496:	0b c0       	rjmp	.+22     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     498:	28 e0       	ldi	r18, 0x08	; 8
     49a:	38 e0       	ldi	r19, 0x08	; 8
     49c:	48 e0       	ldi	r20, 0x08	; 8
     49e:	58 e0       	ldi	r21, 0x08	; 8
     4a0:	68 e0       	ldi	r22, 0x08	; 8
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
     4ac:	1f 5f       	subi	r17, 0xFF	; 255
     4ae:	f5 01       	movw	r30, r10
     4b0:	65 81       	ldd	r22, Z+5	; 0x05
     4b2:	76 81       	ldd	r23, Z+6	; 0x06
     4b4:	87 81       	ldd	r24, Z+7	; 0x07
     4b6:	90 85       	ldd	r25, Z+8	; 0x08
     4b8:	a7 01       	movw	r20, r14
     4ba:	96 01       	movw	r18, r12
     4bc:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
     4c0:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
     4c4:	16 17       	cp	r17, r22
     4c6:	40 f3       	brcs	.-48     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
     4c8:	2a e2       	ldi	r18, 0x2A	; 42
     4ca:	3c e1       	ldi	r19, 0x1C	; 28
     4cc:	48 e0       	ldi	r20, 0x08	; 8
     4ce:	5e e3       	ldi	r21, 0x3E	; 62
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>

     4dc:	ec 96       	adiw	r28, 0x3c	; 60
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	bf 90       	pop	r11
     4fa:	af 90       	pop	r10
     4fc:	08 95       	ret

000004fe <GLCD_SelectPage>:
}


void GLCD_SelectPage(GLCD_PageSelectType Page)
{
	switch (Page) {
     4fe:	81 30       	cpi	r24, 0x01	; 1
     500:	89 f0       	breq	.+34     	; 0x524 <GLCD_SelectPage+0x26>
     502:	28 f0       	brcs	.+10     	; 0x50e <GLCD_SelectPage+0x10>
     504:	82 30       	cpi	r24, 0x02	; 2
     506:	c9 f0       	breq	.+50     	; 0x53a <GLCD_SelectPage+0x3c>
     508:	83 30       	cpi	r24, 0x03	; 3
     50a:	11 f1       	breq	.+68     	; 0x550 <GLCD_SelectPage+0x52>
     50c:	08 95       	ret
		case GLCD_NO_PAGES:
		DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_LOW);
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	64 e0       	ldi	r22, 0x04	; 4
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
		DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_LOW);
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	65 e0       	ldi	r22, 0x05	; 5
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
		break;
     522:	08 95       	ret
		case GLCD_PAGE_0:
		DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_HIGH);
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	64 e0       	ldi	r22, 0x04	; 4
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
		DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_LOW);
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	65 e0       	ldi	r22, 0x05	; 5
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
		break;
     538:	08 95       	ret
		case GLCD_PAGE_1:
		DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_LOW);
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
		DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_HIGH);
     544:	41 e0       	ldi	r20, 0x01	; 1
     546:	65 e0       	ldi	r22, 0x05	; 5
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
		break;
     54e:	08 95       	ret
		case GLCD_BOTH_PAGES:
		DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_HIGH);
     550:	41 e0       	ldi	r20, 0x01	; 1
     552:	64 e0       	ldi	r22, 0x04	; 4
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
		DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_HIGH);
     55a:	41 e0       	ldi	r20, 0x01	; 1
     55c:	65 e0       	ldi	r22, 0x05	; 5
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
     564:	08 95       	ret

00000566 <GLCD_SendInstruction>:
	}
}


void GLCD_SendInstruction(GLCD_CommandType Instruction)
{
     566:	cf 93       	push	r28
     568:	c8 2f       	mov	r28, r24
	/* Select Instruction Register */
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_INSTRUCTION_REG);
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	62 e0       	ldi	r22, 0x02	; 2
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
	/* Select Write Operation */
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
	/* Send Command on Data Pins */
	DIO_setPortValue(GLCD_DATA_PORT, Instruction);
     57e:	6c 2f       	mov	r22, r28
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_setPortValue>
	/* Enable Pulse of min. width 1us */
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_HIGH);
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     590:	00 c0       	rjmp	.+0      	; 0x592 <GLCD_SendInstruction+0x2c>
     592:	00 c0       	rjmp	.+0      	; 0x594 <GLCD_SendInstruction+0x2e>
     594:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	
	#else
	_delay_us(5);
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_LOW);
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
}
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <GLCD_init>:
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	// GPT_Init(gaStrGPT_Config);
	#endif
	
	/* Initialize Port Directions */
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_OUTPUT);
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_RS_PIN, DIO_PIN_OUTPUT);
     5ae:	41 e0       	ldi	r20, 0x01	; 1
     5b0:	62 e0       	ldi	r22, 0x02	; 2
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_RW_PIN, DIO_PIN_OUTPUT);
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_OUTPUT);
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	66 e0       	ldi	r22, 0x06	; 6
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_OUTPUT);
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	64 e0       	ldi	r22, 0x04	; 4
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_OUTPUT);
     5d6:	41 e0       	ldi	r20, 0x01	; 1
     5d8:	65 e0       	ldi	r22, 0x05	; 5
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_setPinDirection>

	DIO_setPortDirection(GLCD_DATA_PORT, DIO_PIN_OUTPUT);
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_setPortDirection>
	/* Keep reset pin inactive (high) */
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_HIGH);
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	66 e0       	ldi	r22, 0x06	; 6
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
	/* Initialization of GLCD Sequence */
	GLCD_SelectPage(GLCD_BOTH_PAGES);
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISPLAY_OFF);
     5f8:	8e e3       	ldi	r24, 0x3E	; 62
     5fa:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + 0);  /* line=0 */
     5fe:	88 eb       	ldi	r24, 0xB8	; 184
     600:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
	Current_X_Address = 0;
     604:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <Current_X_Address>
	GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + 0);  /* column=0 */
     608:	80 e4       	ldi	r24, 0x40	; 64
     60a:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
	Current_Y_Address = 0;
     60e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <Current_Y_Address>
	GLCD_SendInstruction(GLCD_SET_Z_ADDRESS_PREFIX + 0);  /* start_line=0 */
     612:	80 ec       	ldi	r24, 0xC0	; 192
     614:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISPLAY_ON);
     618:	8f e3       	ldi	r24, 0x3F	; 63
     61a:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 7f 02 	call	0x4fe	; 0x4fe <GLCD_SelectPage>
	Current_Page = 0;
     624:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end>
     628:	08 95       	ret

0000062a <GLCD_SendData>:
	_delay_us(5);
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_LOW);
}

void GLCD_SendData(u8 Data) {
     62a:	cf 93       	push	r28
     62c:	c8 2f       	mov	r28, r24
	
	/* Select Data Register */
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_DATA_REG);
     62e:	41 e0       	ldi	r20, 0x01	; 1
     630:	62 e0       	ldi	r22, 0x02	; 2
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
	/* Select Write Operation */
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
	/* Send Command on Data Pins */
	DIO_setPortValue(GLCD_DATA_PORT, Data);
     642:	6c 2f       	mov	r22, r28
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_setPortValue>
	/* Enable Pulse of min. width 1us */
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_HIGH);
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
     654:	00 c0       	rjmp	.+0      	; 0x656 <GLCD_SendData+0x2c>
     656:	00 c0       	rjmp	.+0      	; 0x658 <GLCD_SendData+0x2e>
     658:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	
	#else
	_delay_us(5);
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_LOW);
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
}
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <GLCD_Reset>:

void GLCD_Reset(void)
{
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_LOW);
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	66 e0       	ldi	r22, 0x06	; 6
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	8a 95       	dec	r24
     676:	f1 f7       	brne	.-4      	; 0x674 <GLCD_Reset+0xc>
     678:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	//GPT_Delay_us(&gaStrGPT_Config[0], 10);
	#else
	_delay_us(10);
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_HIGH);
     67a:	41 e0       	ldi	r20, 0x01	; 1
     67c:	66 e0       	ldi	r22, 0x06	; 6
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_setPinValue>
     684:	08 95       	ret

00000686 <GLCD_DisplaySpecialPattern>:
}

void GLCD_DisplaySpecialPattern(u64 Pattern) {
     686:	9f 92       	push	r9
     688:	af 92       	push	r10
     68a:	bf 92       	push	r11
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	92 2e       	mov	r9, r18
     69e:	a3 2e       	mov	r10, r19
     6a0:	b4 2e       	mov	r11, r20
     6a2:	c5 2e       	mov	r12, r21
     6a4:	d6 2e       	mov	r13, r22
     6a6:	e7 2e       	mov	r14, r23
     6a8:	f8 2e       	mov	r15, r24
     6aa:	d9 2f       	mov	r29, r25
	for(u8 i = 0; i < 5; i++)
     6ac:	c0 e0       	ldi	r28, 0x00	; 0
     6ae:	30 c0       	rjmp	.+96     	; 0x710 <GLCD_DisplaySpecialPattern+0x8a>
	{
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + Current_X_Address);
     6b0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Current_X_Address>
     6b4:	88 54       	subi	r24, 0x48	; 72
     6b6:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + Current_Y_Address);
     6ba:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Current_Y_Address>
     6be:	80 5c       	subi	r24, 0xC0	; 192
     6c0:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
     6c4:	0c 2f       	mov	r16, r28
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	00 0f       	add	r16, r16
     6ca:	11 1f       	adc	r17, r17
     6cc:	00 0f       	add	r16, r16
     6ce:	11 1f       	adc	r17, r17
     6d0:	00 0f       	add	r16, r16
     6d2:	11 1f       	adc	r17, r17
     6d4:	29 2d       	mov	r18, r9
     6d6:	3a 2d       	mov	r19, r10
     6d8:	4b 2d       	mov	r20, r11
     6da:	5c 2d       	mov	r21, r12
     6dc:	6d 2d       	mov	r22, r13
     6de:	7e 2d       	mov	r23, r14
     6e0:	8f 2d       	mov	r24, r15
     6e2:	9d 2f       	mov	r25, r29
     6e4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__lshrdi3>
     6e8:	82 2f       	mov	r24, r18
     6ea:	0e 94 15 03 	call	0x62a	; 0x62a <GLCD_SendData>
		Current_Y_Address++;
     6ee:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Current_Y_Address>
     6f2:	8f 5f       	subi	r24, 0xFF	; 255
     6f4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Current_Y_Address>
		
		if (Current_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Page == 0)
     6f8:	80 34       	cpi	r24, 0x40	; 64
     6fa:	48 f0       	brcs	.+18     	; 0x70e <GLCD_DisplaySpecialPattern+0x88>
     6fc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
     700:	81 11       	cpse	r24, r1
     702:	05 c0       	rjmp	.+10     	; 0x70e <GLCD_DisplaySpecialPattern+0x88>
		{
			GLCD_SelectPage(GLCD_PAGE_1);
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	0e 94 7f 02 	call	0x4fe	; 0x4fe <GLCD_SelectPage>
			Current_Y_Address = 0;
     70a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <Current_Y_Address>
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_HIGH);
}

void GLCD_DisplaySpecialPattern(u64 Pattern) {
	for(u8 i = 0; i < 5; i++)
     70e:	cf 5f       	subi	r28, 0xFF	; 255
     710:	c5 30       	cpi	r28, 0x05	; 5
     712:	70 f2       	brcs	.-100    	; 0x6b0 <GLCD_DisplaySpecialPattern+0x2a>
		{
			GLCD_SelectPage(GLCD_PAGE_1);
			Current_Y_Address = 0;
		}
	}
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	9f 90       	pop	r9
     72a:	08 95       	ret

0000072c <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(u8 Data)
{
     72c:	e8 2f       	mov	r30, r24
	if ((Current_Page == 0) | (Current_Y_Address < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
     734:	81 11       	cpse	r24, r1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <Current_Y_Address>
     73e:	29 33       	cpi	r18, 0x39	; 57
     740:	08 f0       	brcs	.+2      	; 0x744 <GLCD_DisplayCharacter+0x18>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	89 2b       	or	r24, r25
     746:	09 f4       	brne	.+2      	; 0x74a <GLCD_DisplayCharacter+0x1e>
     748:	eb c1       	rjmp	.+982    	; 0xb20 <__stack+0x2c1>
		/* Enough space to write character */
		switch (Data) {
     74a:	8e 2f       	mov	r24, r30
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	fc 01       	movw	r30, r24
     750:	b0 97       	sbiw	r30, 0x20	; 32
     752:	eb 35       	cpi	r30, 0x5B	; 91
     754:	f1 05       	cpc	r31, r1
     756:	08 f0       	brcs	.+2      	; 0x75a <GLCD_DisplayCharacter+0x2e>
     758:	c6 c1       	rjmp	.+908    	; 0xae6 <__stack+0x287>
     75a:	e6 5d       	subi	r30, 0xD6	; 214
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__tablejump2__>
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
     762:	2c e7       	ldi	r18, 0x7C	; 124
     764:	32 e1       	ldi	r19, 0x12	; 18
     766:	41 e1       	ldi	r20, 0x11	; 17
     768:	52 e1       	ldi	r21, 0x12	; 18
     76a:	6c e7       	ldi	r22, 0x7C	; 124
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     776:	b7 c1       	rjmp	.+878    	; 0xae6 <__stack+0x287>
			case 'B': case 'b': GLCD_DisplaySpecialPattern(GLCD_CHAR_B); break;
     778:	2f e7       	ldi	r18, 0x7F	; 127
     77a:	39 e4       	ldi	r19, 0x49	; 73
     77c:	49 e4       	ldi	r20, 0x49	; 73
     77e:	59 e4       	ldi	r21, 0x49	; 73
     780:	66 e3       	ldi	r22, 0x36	; 54
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     78c:	ac c1       	rjmp	.+856    	; 0xae6 <__stack+0x287>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
     78e:	2e e3       	ldi	r18, 0x3E	; 62
     790:	31 e4       	ldi	r19, 0x41	; 65
     792:	41 e4       	ldi	r20, 0x41	; 65
     794:	51 e4       	ldi	r21, 0x41	; 65
     796:	61 e4       	ldi	r22, 0x41	; 65
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     7a2:	a1 c1       	rjmp	.+834    	; 0xae6 <__stack+0x287>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
     7a4:	2f e7       	ldi	r18, 0x7F	; 127
     7a6:	31 e4       	ldi	r19, 0x41	; 65
     7a8:	41 e4       	ldi	r20, 0x41	; 65
     7aa:	5e e3       	ldi	r21, 0x3E	; 62
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     7b8:	96 c1       	rjmp	.+812    	; 0xae6 <__stack+0x287>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
     7ba:	2f e7       	ldi	r18, 0x7F	; 127
     7bc:	39 e4       	ldi	r19, 0x49	; 73
     7be:	49 e4       	ldi	r20, 0x49	; 73
     7c0:	59 e4       	ldi	r21, 0x49	; 73
     7c2:	61 e4       	ldi	r22, 0x41	; 65
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     7ce:	8b c1       	rjmp	.+790    	; 0xae6 <__stack+0x287>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
     7d0:	2f e7       	ldi	r18, 0x7F	; 127
     7d2:	39 e0       	ldi	r19, 0x09	; 9
     7d4:	49 e0       	ldi	r20, 0x09	; 9
     7d6:	59 e0       	ldi	r21, 0x09	; 9
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     7e4:	80 c1       	rjmp	.+768    	; 0xae6 <__stack+0x287>
			case 'G': case 'g': GLCD_DisplaySpecialPattern(GLCD_CHAR_G); break;
     7e6:	2e e3       	ldi	r18, 0x3E	; 62
     7e8:	31 e4       	ldi	r19, 0x41	; 65
     7ea:	41 e4       	ldi	r20, 0x41	; 65
     7ec:	59 e2       	ldi	r21, 0x29	; 41
     7ee:	6a e7       	ldi	r22, 0x7A	; 122
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     7fa:	75 c1       	rjmp	.+746    	; 0xae6 <__stack+0x287>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
     7fc:	2f e7       	ldi	r18, 0x7F	; 127
     7fe:	38 e0       	ldi	r19, 0x08	; 8
     800:	48 e0       	ldi	r20, 0x08	; 8
     802:	58 e0       	ldi	r21, 0x08	; 8
     804:	6f e7       	ldi	r22, 0x7F	; 127
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     810:	6a c1       	rjmp	.+724    	; 0xae6 <__stack+0x287>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
     812:	21 e4       	ldi	r18, 0x41	; 65
     814:	31 e4       	ldi	r19, 0x41	; 65
     816:	4f e7       	ldi	r20, 0x7F	; 127
     818:	51 e4       	ldi	r21, 0x41	; 65
     81a:	61 e4       	ldi	r22, 0x41	; 65
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     826:	5f c1       	rjmp	.+702    	; 0xae6 <__stack+0x287>
			case 'J': case 'j': GLCD_DisplaySpecialPattern(GLCD_CHAR_J); break;
     828:	20 e2       	ldi	r18, 0x20	; 32
     82a:	30 e4       	ldi	r19, 0x40	; 64
     82c:	41 e4       	ldi	r20, 0x41	; 65
     82e:	5f e3       	ldi	r21, 0x3F	; 63
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     83c:	54 c1       	rjmp	.+680    	; 0xae6 <__stack+0x287>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
     83e:	2f e7       	ldi	r18, 0x7F	; 127
     840:	38 e0       	ldi	r19, 0x08	; 8
     842:	44 e1       	ldi	r20, 0x14	; 20
     844:	52 e2       	ldi	r21, 0x22	; 34
     846:	61 e4       	ldi	r22, 0x41	; 65
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     852:	49 c1       	rjmp	.+658    	; 0xae6 <__stack+0x287>
			case 'L': case 'l': GLCD_DisplaySpecialPattern(GLCD_CHAR_L); break;
     854:	2f e7       	ldi	r18, 0x7F	; 127
     856:	30 e4       	ldi	r19, 0x40	; 64
     858:	40 e4       	ldi	r20, 0x40	; 64
     85a:	50 e4       	ldi	r21, 0x40	; 64
     85c:	60 e4       	ldi	r22, 0x40	; 64
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     868:	3e c1       	rjmp	.+636    	; 0xae6 <__stack+0x287>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
     86a:	2f e7       	ldi	r18, 0x7F	; 127
     86c:	32 e0       	ldi	r19, 0x02	; 2
     86e:	4c e0       	ldi	r20, 0x0C	; 12
     870:	52 e0       	ldi	r21, 0x02	; 2
     872:	6f e7       	ldi	r22, 0x7F	; 127
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     87e:	33 c1       	rjmp	.+614    	; 0xae6 <__stack+0x287>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
     880:	2f e7       	ldi	r18, 0x7F	; 127
     882:	32 e0       	ldi	r19, 0x02	; 2
     884:	4c e1       	ldi	r20, 0x1C	; 28
     886:	50 e2       	ldi	r21, 0x20	; 32
     888:	6f e7       	ldi	r22, 0x7F	; 127
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     894:	28 c1       	rjmp	.+592    	; 0xae6 <__stack+0x287>
			case 'O': case 'o': GLCD_DisplaySpecialPattern(GLCD_CHAR_O); break;
     896:	2e e3       	ldi	r18, 0x3E	; 62
     898:	31 e4       	ldi	r19, 0x41	; 65
     89a:	41 e4       	ldi	r20, 0x41	; 65
     89c:	51 e4       	ldi	r21, 0x41	; 65
     89e:	6e e3       	ldi	r22, 0x3E	; 62
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     8aa:	1d c1       	rjmp	.+570    	; 0xae6 <__stack+0x287>
			case 'P': case 'p': GLCD_DisplaySpecialPattern(GLCD_CHAR_P); break;
     8ac:	2f e7       	ldi	r18, 0x7F	; 127
     8ae:	39 e0       	ldi	r19, 0x09	; 9
     8b0:	49 e0       	ldi	r20, 0x09	; 9
     8b2:	59 e0       	ldi	r21, 0x09	; 9
     8b4:	66 e0       	ldi	r22, 0x06	; 6
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     8c0:	12 c1       	rjmp	.+548    	; 0xae6 <__stack+0x287>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
     8c2:	2e e3       	ldi	r18, 0x3E	; 62
     8c4:	31 e4       	ldi	r19, 0x41	; 65
     8c6:	41 e5       	ldi	r20, 0x51	; 81
     8c8:	51 e2       	ldi	r21, 0x21	; 33
     8ca:	6e e5       	ldi	r22, 0x5E	; 94
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     8d6:	07 c1       	rjmp	.+526    	; 0xae6 <__stack+0x287>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
     8d8:	2f e7       	ldi	r18, 0x7F	; 127
     8da:	39 e0       	ldi	r19, 0x09	; 9
     8dc:	49 e1       	ldi	r20, 0x19	; 25
     8de:	59 e2       	ldi	r21, 0x29	; 41
     8e0:	66 e4       	ldi	r22, 0x46	; 70
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     8ec:	fc c0       	rjmp	.+504    	; 0xae6 <__stack+0x287>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
     8ee:	26 e2       	ldi	r18, 0x26	; 38
     8f0:	39 e4       	ldi	r19, 0x49	; 73
     8f2:	49 e4       	ldi	r20, 0x49	; 73
     8f4:	59 e4       	ldi	r21, 0x49	; 73
     8f6:	62 e3       	ldi	r22, 0x32	; 50
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     902:	f1 c0       	rjmp	.+482    	; 0xae6 <__stack+0x287>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
     904:	21 e0       	ldi	r18, 0x01	; 1
     906:	31 e0       	ldi	r19, 0x01	; 1
     908:	4f e7       	ldi	r20, 0x7F	; 127
     90a:	51 e0       	ldi	r21, 0x01	; 1
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     918:	e6 c0       	rjmp	.+460    	; 0xae6 <__stack+0x287>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
     91a:	2f e3       	ldi	r18, 0x3F	; 63
     91c:	30 e4       	ldi	r19, 0x40	; 64
     91e:	40 e4       	ldi	r20, 0x40	; 64
     920:	50 e4       	ldi	r21, 0x40	; 64
     922:	6f e3       	ldi	r22, 0x3F	; 63
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     92e:	db c0       	rjmp	.+438    	; 0xae6 <__stack+0x287>
			case 'V': case 'v': GLCD_DisplaySpecialPattern(GLCD_CHAR_V); break;
     930:	2f e1       	ldi	r18, 0x1F	; 31
     932:	30 e2       	ldi	r19, 0x20	; 32
     934:	40 e4       	ldi	r20, 0x40	; 64
     936:	50 e2       	ldi	r21, 0x20	; 32
     938:	6f e1       	ldi	r22, 0x1F	; 31
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     944:	d0 c0       	rjmp	.+416    	; 0xae6 <__stack+0x287>
			case 'W': case 'w': GLCD_DisplaySpecialPattern(GLCD_CHAR_W); break;
     946:	2f e3       	ldi	r18, 0x3F	; 63
     948:	30 e4       	ldi	r19, 0x40	; 64
     94a:	40 e2       	ldi	r20, 0x20	; 32
     94c:	50 e4       	ldi	r21, 0x40	; 64
     94e:	6f e3       	ldi	r22, 0x3F	; 63
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     95a:	c5 c0       	rjmp	.+394    	; 0xae6 <__stack+0x287>
			case 'X': case 'x': GLCD_DisplaySpecialPattern(GLCD_CHAR_X); break;
     95c:	23 e6       	ldi	r18, 0x63	; 99
     95e:	34 e1       	ldi	r19, 0x14	; 20
     960:	48 e0       	ldi	r20, 0x08	; 8
     962:	54 e1       	ldi	r21, 0x14	; 20
     964:	63 e6       	ldi	r22, 0x63	; 99
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     970:	ba c0       	rjmp	.+372    	; 0xae6 <__stack+0x287>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
     972:	23 e0       	ldi	r18, 0x03	; 3
     974:	3c e0       	ldi	r19, 0x0C	; 12
     976:	40 e7       	ldi	r20, 0x70	; 112
     978:	5c e0       	ldi	r21, 0x0C	; 12
     97a:	63 e0       	ldi	r22, 0x03	; 3
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     986:	af c0       	rjmp	.+350    	; 0xae6 <__stack+0x287>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
     988:	21 e6       	ldi	r18, 0x61	; 97
     98a:	31 e5       	ldi	r19, 0x51	; 81
     98c:	49 e4       	ldi	r20, 0x49	; 73
     98e:	55 e4       	ldi	r21, 0x45	; 69
     990:	63 e4       	ldi	r22, 0x43	; 67
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     99c:	a4 c0       	rjmp	.+328    	; 0xae6 <__stack+0x287>
			
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
     99e:	23 ec       	ldi	r18, 0xC3	; 195
     9a0:	33 e7       	ldi	r19, 0x73	; 115
     9a2:	48 e1       	ldi	r20, 0x18	; 24
     9a4:	5e ec       	ldi	r21, 0xCE	; 206
     9a6:	63 ec       	ldi	r22, 0xC3	; 195
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     9b2:	99 c0       	rjmp	.+306    	; 0xae6 <__stack+0x287>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
     9b4:	24 e2       	ldi	r18, 0x24	; 36
     9b6:	34 e2       	ldi	r19, 0x24	; 36
     9b8:	44 e2       	ldi	r20, 0x24	; 36
     9ba:	54 e2       	ldi	r21, 0x24	; 36
     9bc:	64 e2       	ldi	r22, 0x24	; 36
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     9c8:	8e c0       	rjmp	.+284    	; 0xae6 <__stack+0x287>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e7       	ldi	r19, 0x70	; 112
     9ce:	40 e7       	ldi	r20, 0x70	; 112
     9d0:	50 e7       	ldi	r21, 0x70	; 112
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     9de:	83 c0       	rjmp	.+262    	; 0xae6 <__stack+0x287>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     9f4:	78 c0       	rjmp	.+240    	; 0xae6 <__stack+0x287>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
     9f6:	28 e1       	ldi	r18, 0x18	; 24
     9f8:	38 e1       	ldi	r19, 0x18	; 24
     9fa:	48 e1       	ldi	r20, 0x18	; 24
     9fc:	58 e1       	ldi	r21, 0x18	; 24
     9fe:	68 e1       	ldi	r22, 0x18	; 24
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     a0a:	6d c0       	rjmp	.+218    	; 0xae6 <__stack+0x287>
			
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
     a0c:	2e e3       	ldi	r18, 0x3E	; 62
     a0e:	31 e5       	ldi	r19, 0x51	; 81
     a10:	49 e4       	ldi	r20, 0x49	; 73
     a12:	55 e4       	ldi	r21, 0x45	; 69
     a14:	6e e3       	ldi	r22, 0x3E	; 62
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     a20:	62 c0       	rjmp	.+196    	; 0xae6 <__stack+0x287>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	32 e4       	ldi	r19, 0x42	; 66
     a26:	4f e7       	ldi	r20, 0x7F	; 127
     a28:	50 e4       	ldi	r21, 0x40	; 64
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     a36:	57 c0       	rjmp	.+174    	; 0xae6 <__stack+0x287>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
     a38:	22 e4       	ldi	r18, 0x42	; 66
     a3a:	31 e6       	ldi	r19, 0x61	; 97
     a3c:	41 e5       	ldi	r20, 0x51	; 81
     a3e:	59 e4       	ldi	r21, 0x49	; 73
     a40:	66 e4       	ldi	r22, 0x46	; 70
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     a4c:	4c c0       	rjmp	.+152    	; 0xae6 <__stack+0x287>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
     a4e:	21 e4       	ldi	r18, 0x41	; 65
     a50:	39 e4       	ldi	r19, 0x49	; 73
     a52:	49 e4       	ldi	r20, 0x49	; 73
     a54:	59 e4       	ldi	r21, 0x49	; 73
     a56:	66 e3       	ldi	r22, 0x36	; 54
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     a62:	41 c0       	rjmp	.+130    	; 0xae6 <__stack+0x287>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
     a64:	28 e1       	ldi	r18, 0x18	; 24
     a66:	34 e1       	ldi	r19, 0x14	; 20
     a68:	42 e1       	ldi	r20, 0x12	; 18
     a6a:	5f e7       	ldi	r21, 0x7F	; 127
     a6c:	60 e1       	ldi	r22, 0x10	; 16
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     a78:	36 c0       	rjmp	.+108    	; 0xae6 <__stack+0x287>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
     a7a:	2f e4       	ldi	r18, 0x4F	; 79
     a7c:	39 e4       	ldi	r19, 0x49	; 73
     a7e:	49 e4       	ldi	r20, 0x49	; 73
     a80:	59 e4       	ldi	r21, 0x49	; 73
     a82:	61 e3       	ldi	r22, 0x31	; 49
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     a8e:	2b c0       	rjmp	.+86     	; 0xae6 <__stack+0x287>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
     a90:	2c e7       	ldi	r18, 0x7C	; 124
     a92:	3a e4       	ldi	r19, 0x4A	; 74
     a94:	49 e4       	ldi	r20, 0x49	; 73
     a96:	59 e4       	ldi	r21, 0x49	; 73
     a98:	61 e3       	ldi	r22, 0x31	; 49
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     aa4:	20 c0       	rjmp	.+64     	; 0xae6 <__stack+0x287>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
     aa6:	23 e0       	ldi	r18, 0x03	; 3
     aa8:	31 e0       	ldi	r19, 0x01	; 1
     aaa:	41 e7       	ldi	r20, 0x71	; 113
     aac:	59 e0       	ldi	r21, 0x09	; 9
     aae:	67 e0       	ldi	r22, 0x07	; 7
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     aba:	15 c0       	rjmp	.+42     	; 0xae6 <__stack+0x287>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
     abc:	26 e3       	ldi	r18, 0x36	; 54
     abe:	39 e4       	ldi	r19, 0x49	; 73
     ac0:	49 e4       	ldi	r20, 0x49	; 73
     ac2:	59 e4       	ldi	r21, 0x49	; 73
     ac4:	66 e3       	ldi	r22, 0x36	; 54
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
     ad0:	0a c0       	rjmp	.+20     	; 0xae6 <__stack+0x287>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
     ad2:	26 e0       	ldi	r18, 0x06	; 6
     ad4:	39 e4       	ldi	r19, 0x49	; 73
     ad6:	49 e4       	ldi	r20, 0x49	; 73
     ad8:	59 e2       	ldi	r21, 0x29	; 41
     ada:	6e e1       	ldi	r22, 0x1E	; 30
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 43 03 	call	0x686	; 0x686 <GLCD_DisplaySpecialPattern>
			default: break;
		}
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + Current_X_Address);
     ae6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Current_X_Address>
     aea:	88 54       	subi	r24, 0x48	; 72
     aec:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + Current_Y_Address);
     af0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Current_Y_Address>
     af4:	80 5c       	subi	r24, 0xC0	; 192
     af6:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
		GLCD_SendData(0);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 15 03 	call	0x62a	; 0x62a <GLCD_SendData>
		Current_Y_Address++;
     b00:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Current_Y_Address>
     b04:	8f 5f       	subi	r24, 0xFF	; 255
     b06:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Current_Y_Address>
		if (Current_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Page == 0) {
     b0a:	80 34       	cpi	r24, 0x40	; 64
     b0c:	48 f0       	brcs	.+18     	; 0xb20 <__stack+0x2c1>
     b0e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
     b12:	81 11       	cpse	r24, r1
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <__stack+0x2c1>
			GLCD_SelectPage(GLCD_PAGE_1);
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	0e 94 7f 02 	call	0x4fe	; 0x4fe <GLCD_SelectPage>
			Current_Y_Address = 0;
     b1c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <Current_Y_Address>
     b20:	08 95       	ret

00000b22 <GLCD_DisplayString>:
		}
	}
}

void GLCD_DisplayString(u8* Data_Ptr)
{
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ec 01       	movw	r28, r24
	while (*Data_Ptr != '\0') {
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <GLCD_DisplayString+0xe>
		GLCD_DisplayCharacter(*Data_Ptr);
     b2a:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_DisplayCharacter>
		Data_Ptr++;
     b2e:	21 96       	adiw	r28, 0x01	; 1
	}
}

void GLCD_DisplayString(u8* Data_Ptr)
{
	while (*Data_Ptr != '\0') {
     b30:	88 81       	ld	r24, Y
     b32:	81 11       	cpse	r24, r1
     b34:	fa cf       	rjmp	.-12     	; 0xb2a <GLCD_DisplayString+0x8>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(s32 Data)
{
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GLCD_DisplayInteger+0x12>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <GLCD_DisplayInteger+0x14>
     b50:	1f 92       	push	r1
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	6b 01       	movw	r12, r22
     b58:	7c 01       	movw	r14, r24
	if (Data < 0) {
     b5a:	99 23       	and	r25, r25
     b5c:	5c f4       	brge	.+22     	; 0xb74 <GLCD_DisplayInteger+0x38>
		GLCD_DisplayCharacter('-');
     b5e:	8d e2       	ldi	r24, 0x2D	; 45
     b60:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_DisplayCharacter>
		Data = -1 * Data;
     b64:	f0 94       	com	r15
     b66:	e0 94       	com	r14
     b68:	d0 94       	com	r13
     b6a:	c0 94       	com	r12
     b6c:	c1 1c       	adc	r12, r1
     b6e:	d1 1c       	adc	r13, r1
     b70:	e1 1c       	adc	r14, r1
     b72:	f1 1c       	adc	r15, r1
	}
	u8 u8Local_Digit = 0U;
	char str_reversed[5] = "";
     b74:	1a 82       	std	Y+2, r1	; 0x02
     b76:	19 82       	std	Y+1, r1	; 0x01
     b78:	fe 01       	movw	r30, r28
     b7a:	33 96       	adiw	r30, 0x03	; 3
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	df 01       	movw	r26, r30
     b80:	1d 92       	st	X+, r1
     b82:	8a 95       	dec	r24
     b84:	e9 f7       	brne	.-6      	; 0xb80 <GLCD_DisplayInteger+0x44>
	char* str_ptr = str_reversed;
     b86:	8e 01       	movw	r16, r28
     b88:	0f 5f       	subi	r16, 0xFF	; 255
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
	do {
		u8Local_Digit = Data%10;
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	2a e0       	ldi	r18, 0x0A	; 10
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	0e 94 49 0b 	call	0x1692	; 0x1692 <__divmodsi4>
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
     b9c:	60 5d       	subi	r22, 0xD0	; 208
     b9e:	f8 01       	movw	r30, r16
     ba0:	61 93       	st	Z+, r22
     ba2:	8f 01       	movw	r16, r30
		Data = Data/10;
     ba4:	c2 2e       	mov	r12, r18
     ba6:	d3 2e       	mov	r13, r19
     ba8:	e4 2e       	mov	r14, r20
     baa:	f5 2e       	mov	r15, r21
		str_ptr++;
	} while (Data > 0);
     bac:	1c 14       	cp	r1, r12
     bae:	1d 04       	cpc	r1, r13
     bb0:	1e 04       	cpc	r1, r14
     bb2:	1f 04       	cpc	r1, r15
     bb4:	5c f3       	brlt	.-42     	; 0xb8c <GLCD_DisplayInteger+0x50>
	do {
		str_ptr--;
		GLCD_DisplayCharacter(*str_ptr);
     bb6:	d8 01       	movw	r26, r16
     bb8:	8e 91       	ld	r24, -X
     bba:	8d 01       	movw	r16, r26
     bbc:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	80 17       	cp	r24, r16
     bc6:	91 07       	cpc	r25, r17
     bc8:	b1 f7       	brne	.-20     	; 0xbb6 <GLCD_DisplayInteger+0x7a>
}
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	08 95       	ret

00000be6 <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(f32 Data)
{
     be6:	8f 92       	push	r8
     be8:	9f 92       	push	r9
     bea:	af 92       	push	r10
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	4b 01       	movw	r8, r22
     bfc:	5c 01       	movw	r10, r24
	/* Will display only 3 Decimal Places */
	u16 IntegerPart = (u16)Data;
     bfe:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
	GLCD_DisplayInteger(IntegerPart);
     c02:	6b 01       	movw	r12, r22
     c04:	e1 2c       	mov	r14, r1
     c06:	f1 2c       	mov	r15, r1
     c08:	c7 01       	movw	r24, r14
     c0a:	b6 01       	movw	r22, r12
     c0c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
     c10:	8e e2       	ldi	r24, 0x2E	; 46
     c12:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_DisplayCharacter>
	f32 DecimalPart = (Data - IntegerPart);
     c16:	c7 01       	movw	r24, r14
     c18:	b6 01       	movw	r22, r12
     c1a:	0e 94 3e 0a 	call	0x147c	; 0x147c <__floatunsisf>
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
     c22:	c5 01       	movw	r24, r10
     c24:	b4 01       	movw	r22, r8
     c26:	0e 94 30 09 	call	0x1260	; 0x1260 <__subsf3>
	u8 Digit = 0;
	for (u8 i = 0; i < 3; i++) {
     c2a:	d0 e0       	ldi	r29, 0x00	; 0
     c2c:	1c c0       	rjmp	.+56     	; 0xc66 <GLCD_DisplayFloatingPoint+0x80>
		Digit = (u8)(DecimalPart * 10.0);
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e2       	ldi	r20, 0x20	; 32
     c34:	51 e4       	ldi	r21, 0x41	; 65
     c36:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__mulsf3>
     c3a:	6b 01       	movw	r12, r22
     c3c:	7c 01       	movw	r14, r24
     c3e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
     c42:	c6 2f       	mov	r28, r22
		GLCD_DisplayCharacter((char)(48+Digit));
     c44:	80 e3       	ldi	r24, 0x30	; 48
     c46:	8c 0f       	add	r24, r28
     c48:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
     c4c:	6c 2f       	mov	r22, r28
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 40 0a 	call	0x1480	; 0x1480 <__floatsisf>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	c7 01       	movw	r24, r14
     c5e:	b6 01       	movw	r22, r12
     c60:	0e 94 30 09 	call	0x1260	; 0x1260 <__subsf3>
	u16 IntegerPart = (u16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	f32 DecimalPart = (Data - IntegerPart);
	u8 Digit = 0;
	for (u8 i = 0; i < 3; i++) {
     c64:	df 5f       	subi	r29, 0xFF	; 255
     c66:	d3 30       	cpi	r29, 0x03	; 3
     c68:	10 f3       	brcs	.-60     	; 0xc2e <GLCD_DisplayFloatingPoint+0x48>
		Digit = (u8)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	9f 90       	pop	r9
     c7c:	8f 90       	pop	r8
     c7e:	08 95       	ret

00000c80 <GLCD_GoToLine>:

void GLCD_GoToLine(u8 Line) {
     c80:	cf 93       	push	r28
	if (Line < GLCD_MAX_LINES) {
     c82:	88 30       	cpi	r24, 0x08	; 8
     c84:	78 f4       	brcc	.+30     	; 0xca4 <GLCD_GoToLine+0x24>
     c86:	c8 2f       	mov	r28, r24
		GLCD_SelectPage(GLCD_PAGE_0);
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <GLCD_SelectPage>
		Current_X_Address = Line;
     c8e:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <Current_X_Address>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + Current_X_Address);
     c92:	88 eb       	ldi	r24, 0xB8	; 184
     c94:	8c 0f       	add	r24, r28
     c96:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
		Current_Y_Address = 0;
     c9a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <Current_Y_Address>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + Current_Y_Address);
     c9e:	80 e4       	ldi	r24, 0x40	; 64
     ca0:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
	}
}
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <GLCD_ClearDisplay>:

void GLCD_ClearDisplay(void) {
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     cac:	d0 e0       	ldi	r29, 0x00	; 0
     cae:	13 c0       	rjmp	.+38     	; 0xcd6 <GLCD_ClearDisplay+0x2e>
		GLCD_GoToLine(Line);
     cb0:	8d 2f       	mov	r24, r29
     cb2:	0e 94 40 06 	call	0xc80	; 0xc80 <GLCD_GoToLine>
		GLCD_SelectPage(GLCD_BOTH_PAGES);
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <GLCD_SelectPage>
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     cbc:	c0 e0       	ldi	r28, 0x00	; 0
     cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <GLCD_ClearDisplay+0x28>
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
     cc0:	80 e4       	ldi	r24, 0x40	; 64
     cc2:	8c 0f       	add	r24, r28
     cc4:	0e 94 b3 02 	call	0x566	; 0x566 <GLCD_SendInstruction>
			GLCD_SendData(0);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 15 03 	call	0x62a	; 0x62a <GLCD_SendData>

void GLCD_ClearDisplay(void) {
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_SelectPage(GLCD_BOTH_PAGES);
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     cce:	cf 5f       	subi	r28, 0xFF	; 255
     cd0:	c0 34       	cpi	r28, 0x40	; 64
     cd2:	b0 f3       	brcs	.-20     	; 0xcc0 <GLCD_ClearDisplay+0x18>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + Current_Y_Address);
	}
}

void GLCD_ClearDisplay(void) {
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     cd4:	df 5f       	subi	r29, 0xFF	; 255
     cd6:	d8 30       	cpi	r29, 0x08	; 8
     cd8:	58 f3       	brcs	.-42     	; 0xcb0 <GLCD_ClearDisplay+0x8>
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
     cda:	0e 94 34 03 	call	0x668	; 0x668 <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <GLCD_SelectPage>
	Current_Page = 0;
     ce4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end>
	GLCD_GoToLine(0);
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0e 94 40 06 	call	0xc80	; 0xc80 <GLCD_GoToLine>
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <main>:
		50U						    // Duty Cycle Percentage
	}
};

int main(void)
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	61 97       	sbiw	r28, 0x11	; 17
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
     d08:	0e 94 ac 00 	call	0x158	; 0x158 <PWMDrawer_Init>
	PWM_Signal_SetUp Signal_Data = {0, 0, 0, 0, 0};
     d0c:	fe 01       	movw	r30, r28
     d0e:	31 96       	adiw	r30, 0x01	; 1
     d10:	81 e1       	ldi	r24, 0x11	; 17
     d12:	df 01       	movw	r26, r30
     d14:	1d 92       	st	X+, r1
     d16:	8a 95       	dec	r24
     d18:	e9 f7       	brne	.-6      	; 0xd14 <main+0x20>
	f32 Scale_ms = 0.25;
	
	while(1)
	{
		
		PWM_MeasureSignal(&Signal_Data);
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	0e 94 b9 00 	call	0x172	; 0x172 <PWM_MeasureSignal>
		Scale_ms=((Signal_Data.Period_Time_ms) / 5);
     d22:	6a 85       	ldd	r22, Y+10	; 0x0a
     d24:	7b 85       	ldd	r23, Y+11	; 0x0b
     d26:	8c 85       	ldd	r24, Y+12	; 0x0c
     d28:	9d 85       	ldd	r25, Y+13	; 0x0d
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 ea       	ldi	r20, 0xA0	; 160
     d30:	50 e4       	ldi	r21, 0x40	; 64
     d32:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
     d36:	ab 01       	movw	r20, r22
     d38:	bc 01       	movw	r22, r24
		PWM_DrawSignal(&Signal_Data, Scale_ms);
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	0e 94 1f 01 	call	0x23e	; 0x23e <PWM_DrawSignal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d42:	bf ef       	ldi	r27, 0xFF	; 255
     d44:	23 ec       	ldi	r18, 0xC3	; 195
     d46:	89 e0       	ldi	r24, 0x09	; 9
     d48:	b1 50       	subi	r27, 0x01	; 1
     d4a:	20 40       	sbci	r18, 0x00	; 0
     d4c:	80 40       	sbci	r24, 0x00	; 0
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <main+0x54>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <main+0x5e>
     d52:	00 00       	nop
     d54:	e2 cf       	rjmp	.-60     	; 0xd1a <main+0x26>

00000d56 <DIO_setPinDirection>:
			case DIO_PORTC:
			SET_BIT(PORTC,PinId);
			break;
			
			case DIO_PORTD:
			SET_BIT(PORTD,PinId);
     d56:	84 30       	cpi	r24, 0x04	; 4
     d58:	08 f0       	brcs	.+2      	; 0xd5c <DIO_setPinDirection+0x6>
     d5a:	72 c0       	rjmp	.+228    	; 0xe40 <DIO_setPinDirection+0xea>
     d5c:	68 30       	cpi	r22, 0x08	; 8
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <DIO_setPinDirection+0xc>
     d60:	6f c0       	rjmp	.+222    	; 0xe40 <DIO_setPinDirection+0xea>
     d62:	42 30       	cpi	r20, 0x02	; 2
     d64:	08 f0       	brcs	.+2      	; 0xd68 <DIO_setPinDirection+0x12>
     d66:	6c c0       	rjmp	.+216    	; 0xe40 <DIO_setPinDirection+0xea>
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	01 f1       	breq	.+64     	; 0xdac <DIO_setPinDirection+0x56>
     d6c:	30 f0       	brcs	.+12     	; 0xd7a <DIO_setPinDirection+0x24>
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	b1 f1       	breq	.+108    	; 0xdde <DIO_setPinDirection+0x88>
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	09 f4       	brne	.+2      	; 0xd78 <DIO_setPinDirection+0x22>
     d76:	4c c0       	rjmp	.+152    	; 0xe10 <DIO_setPinDirection+0xba>
     d78:	08 95       	ret
     d7a:	41 30       	cpi	r20, 0x01	; 1
     d7c:	59 f4       	brne	.+22     	; 0xd94 <DIO_setPinDirection+0x3e>
     d7e:	2a b3       	in	r18, 0x1a	; 26
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_setPinDirection+0x34>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	6a 95       	dec	r22
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_setPinDirection+0x30>
     d8e:	82 2b       	or	r24, r18
     d90:	8a bb       	out	0x1a, r24	; 26
     d92:	08 95       	ret
     d94:	2a b3       	in	r18, 0x1a	; 26
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_setPinDirection+0x4a>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	6a 95       	dec	r22
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_setPinDirection+0x46>
     da4:	80 95       	com	r24
     da6:	82 23       	and	r24, r18
     da8:	8a bb       	out	0x1a, r24	; 26
     daa:	08 95       	ret
     dac:	41 30       	cpi	r20, 0x01	; 1
     dae:	59 f4       	brne	.+22     	; 0xdc6 <DIO_setPinDirection+0x70>
     db0:	27 b3       	in	r18, 0x17	; 23
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_setPinDirection+0x66>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	6a 95       	dec	r22
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_setPinDirection+0x62>
     dc0:	82 2b       	or	r24, r18
     dc2:	87 bb       	out	0x17, r24	; 23
     dc4:	08 95       	ret
     dc6:	27 b3       	in	r18, 0x17	; 23
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_setPinDirection+0x7c>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	6a 95       	dec	r22
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_setPinDirection+0x78>
     dd6:	80 95       	com	r24
     dd8:	82 23       	and	r24, r18
     dda:	87 bb       	out	0x17, r24	; 23
     ddc:	08 95       	ret
     dde:	41 30       	cpi	r20, 0x01	; 1
     de0:	59 f4       	brne	.+22     	; 0xdf8 <DIO_setPinDirection+0xa2>
     de2:	24 b3       	in	r18, 0x14	; 20
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_setPinDirection+0x98>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	6a 95       	dec	r22
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_setPinDirection+0x94>
     df2:	82 2b       	or	r24, r18
     df4:	84 bb       	out	0x14, r24	; 20
     df6:	08 95       	ret
     df8:	24 b3       	in	r18, 0x14	; 20
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_setPinDirection+0xae>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	6a 95       	dec	r22
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_setPinDirection+0xaa>
     e08:	80 95       	com	r24
     e0a:	82 23       	and	r24, r18
     e0c:	84 bb       	out	0x14, r24	; 20
     e0e:	08 95       	ret
     e10:	41 30       	cpi	r20, 0x01	; 1
     e12:	59 f4       	brne	.+22     	; 0xe2a <DIO_setPinDirection+0xd4>
     e14:	21 b3       	in	r18, 0x11	; 17
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_setPinDirection+0xca>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	6a 95       	dec	r22
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_setPinDirection+0xc6>
     e24:	82 2b       	or	r24, r18
     e26:	81 bb       	out	0x11, r24	; 17
     e28:	08 95       	ret
     e2a:	21 b3       	in	r18, 0x11	; 17
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_setPinDirection+0xe0>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	6a 95       	dec	r22
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_setPinDirection+0xdc>
     e3a:	80 95       	com	r24
     e3c:	82 23       	and	r24, r18
     e3e:	81 bb       	out	0x11, r24	; 17
     e40:	08 95       	ret

00000e42 <DIO_setPinValue>:
     e42:	84 30       	cpi	r24, 0x04	; 4
     e44:	08 f0       	brcs	.+2      	; 0xe48 <DIO_setPinValue+0x6>
     e46:	72 c0       	rjmp	.+228    	; 0xf2c <DIO_setPinValue+0xea>
     e48:	68 30       	cpi	r22, 0x08	; 8
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <DIO_setPinValue+0xc>
     e4c:	6f c0       	rjmp	.+222    	; 0xf2c <DIO_setPinValue+0xea>
     e4e:	42 30       	cpi	r20, 0x02	; 2
     e50:	08 f0       	brcs	.+2      	; 0xe54 <DIO_setPinValue+0x12>
     e52:	6c c0       	rjmp	.+216    	; 0xf2c <DIO_setPinValue+0xea>
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	01 f1       	breq	.+64     	; 0xe98 <DIO_setPinValue+0x56>
     e58:	30 f0       	brcs	.+12     	; 0xe66 <DIO_setPinValue+0x24>
     e5a:	82 30       	cpi	r24, 0x02	; 2
     e5c:	b1 f1       	breq	.+108    	; 0xeca <DIO_setPinValue+0x88>
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	09 f4       	brne	.+2      	; 0xe64 <DIO_setPinValue+0x22>
     e62:	4c c0       	rjmp	.+152    	; 0xefc <DIO_setPinValue+0xba>
     e64:	08 95       	ret
     e66:	41 30       	cpi	r20, 0x01	; 1
     e68:	59 f4       	brne	.+22     	; 0xe80 <DIO_setPinValue+0x3e>
     e6a:	2b b3       	in	r18, 0x1b	; 27
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_setPinValue+0x34>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	6a 95       	dec	r22
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_setPinValue+0x30>
     e7a:	82 2b       	or	r24, r18
     e7c:	8b bb       	out	0x1b, r24	; 27
     e7e:	08 95       	ret
     e80:	2b b3       	in	r18, 0x1b	; 27
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_setPinValue+0x4a>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	6a 95       	dec	r22
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_setPinValue+0x46>
     e90:	80 95       	com	r24
     e92:	82 23       	and	r24, r18
     e94:	8b bb       	out	0x1b, r24	; 27
     e96:	08 95       	ret
     e98:	41 30       	cpi	r20, 0x01	; 1
     e9a:	59 f4       	brne	.+22     	; 0xeb2 <DIO_setPinValue+0x70>
     e9c:	28 b3       	in	r18, 0x18	; 24
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_setPinValue+0x66>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	6a 95       	dec	r22
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_setPinValue+0x62>
     eac:	82 2b       	or	r24, r18
     eae:	88 bb       	out	0x18, r24	; 24
     eb0:	08 95       	ret
     eb2:	28 b3       	in	r18, 0x18	; 24
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_setPinValue+0x7c>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	6a 95       	dec	r22
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_setPinValue+0x78>
     ec2:	80 95       	com	r24
     ec4:	82 23       	and	r24, r18
     ec6:	88 bb       	out	0x18, r24	; 24
     ec8:	08 95       	ret
     eca:	41 30       	cpi	r20, 0x01	; 1
     ecc:	59 f4       	brne	.+22     	; 0xee4 <DIO_setPinValue+0xa2>
     ece:	25 b3       	in	r18, 0x15	; 21
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_setPinValue+0x98>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	6a 95       	dec	r22
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_setPinValue+0x94>
     ede:	82 2b       	or	r24, r18
     ee0:	85 bb       	out	0x15, r24	; 21
     ee2:	08 95       	ret
     ee4:	25 b3       	in	r18, 0x15	; 21
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_setPinValue+0xae>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	6a 95       	dec	r22
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_setPinValue+0xaa>
     ef4:	80 95       	com	r24
     ef6:	82 23       	and	r24, r18
     ef8:	85 bb       	out	0x15, r24	; 21
     efa:	08 95       	ret
     efc:	41 30       	cpi	r20, 0x01	; 1
     efe:	59 f4       	brne	.+22     	; 0xf16 <DIO_setPinValue+0xd4>
     f00:	22 b3       	in	r18, 0x12	; 18
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_setPinValue+0xca>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	6a 95       	dec	r22
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_setPinValue+0xc6>
     f10:	82 2b       	or	r24, r18
     f12:	82 bb       	out	0x12, r24	; 18
     f14:	08 95       	ret
     f16:	22 b3       	in	r18, 0x12	; 18
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_setPinValue+0xe0>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	6a 95       	dec	r22
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_setPinValue+0xdc>
     f26:	80 95       	com	r24
     f28:	82 23       	and	r24, r18
     f2a:	82 bb       	out	0x12, r24	; 18
     f2c:	08 95       	ret

00000f2e <DIO_setPortDirection>:


/* Port Apis */
void DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	if((PortId<=3) && ((DIO_PORT_OUTPUT == PortDirection) || (DIO_PORT_INPUT == PortDirection)))
     f2e:	84 30       	cpi	r24, 0x04	; 4
     f30:	38 f5       	brcc	.+78     	; 0xf80 <DIO_setPortDirection+0x52>
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	96 0f       	add	r25, r22
     f36:	9e 3f       	cpi	r25, 0xFE	; 254
     f38:	18 f1       	brcs	.+70     	; 0xf80 <DIO_setPortDirection+0x52>
	{
		switch(PortId)
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <DIO_setPortDirection+0x2a>
     f3e:	28 f0       	brcs	.+10     	; 0xf4a <DIO_setPortDirection+0x1c>
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	89 f0       	breq	.+34     	; 0xf66 <DIO_setPortDirection+0x38>
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	b1 f0       	breq	.+44     	; 0xf74 <DIO_setPortDirection+0x46>
     f48:	08 95       	ret
		{
			case 0:
			if(DIO_PORT_OUTPUT == PortDirection)
     f4a:	6f 3f       	cpi	r22, 0xFF	; 255
     f4c:	19 f4       	brne	.+6      	; 0xf54 <DIO_setPortDirection+0x26>
			{
				DDRA = 0xff;
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	8a bb       	out	0x1a, r24	; 26
     f52:	08 95       	ret
			}
			else
			{
				DDRA = 0x00;
     f54:	1a ba       	out	0x1a, r1	; 26
     f56:	08 95       	ret
			}
			break;

			case 1:
			if(DIO_PORT_OUTPUT == PortDirection)
     f58:	6f 3f       	cpi	r22, 0xFF	; 255
     f5a:	19 f4       	brne	.+6      	; 0xf62 <DIO_setPortDirection+0x34>
			{
				DDRB = 0xff;
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	87 bb       	out	0x17, r24	; 23
     f60:	08 95       	ret
			}
			else
			{
				DDRB = 0x00;
     f62:	17 ba       	out	0x17, r1	; 23
     f64:	08 95       	ret
			}
			break;

			case 2:
			if(DIO_PORT_OUTPUT == PortDirection)
     f66:	6f 3f       	cpi	r22, 0xFF	; 255
     f68:	19 f4       	brne	.+6      	; 0xf70 <DIO_setPortDirection+0x42>
			{
				DDRC = 0xff;
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	84 bb       	out	0x14, r24	; 20
     f6e:	08 95       	ret
			}
			else
			{
				DDRC = 0x00;
     f70:	14 ba       	out	0x14, r1	; 20
     f72:	08 95       	ret
			}
			break;

			case 3:
			if(DIO_PORT_OUTPUT == PortDirection)
     f74:	6f 3f       	cpi	r22, 0xFF	; 255
     f76:	19 f4       	brne	.+6      	; 0xf7e <DIO_setPortDirection+0x50>
			{
				DDRD = 0xff;
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	81 bb       	out	0x11, r24	; 17
     f7c:	08 95       	ret
			}
			else
			{
				DDRD = 0x00;
     f7e:	11 ba       	out	0x11, r1	; 17
     f80:	08 95       	ret

00000f82 <DIO_setPortValue>:
}


void DIO_setPortValue(u8 PortId, u8 PortValue)
{
	if(PortId<=3)
     f82:	84 30       	cpi	r24, 0x04	; 4
     f84:	78 f4       	brcc	.+30     	; 0xfa4 <DIO_setPortValue+0x22>
	{
		switch(PortId)
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	41 f0       	breq	.+16     	; 0xf9a <DIO_setPortValue+0x18>
     f8a:	28 f0       	brcs	.+10     	; 0xf96 <DIO_setPortValue+0x14>
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	39 f0       	breq	.+14     	; 0xf9e <DIO_setPortValue+0x1c>
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	39 f0       	breq	.+14     	; 0xfa2 <DIO_setPortValue+0x20>
     f94:	08 95       	ret
		{
			case 0:
			PORTA = PortValue;
     f96:	6b bb       	out	0x1b, r22	; 27
			break;
     f98:	08 95       	ret

			case 1:
			PORTB = PortValue;
     f9a:	68 bb       	out	0x18, r22	; 24
			break;
     f9c:	08 95       	ret

			case 2:
			PORTC = PortValue;
     f9e:	65 bb       	out	0x15, r22	; 21
			break;
     fa0:	08 95       	ret

			case 3:
			PORTD = PortValue;
     fa2:	62 bb       	out	0x12, r22	; 18
     fa4:	08 95       	ret

00000fa6 <ICU_Init>:

/* MCAL */
#include "ICU_interface.h"
#include "ICU_config.h"

void ICU_Init(const ICU_Config* Config_Ptr) {
     fa6:	fc 01       	movw	r30, r24
	/* Set ICP1 Pin (on PD6) as Input to trigger the ICU */
	CLR_BIT(*PORTD_DIR_REG, 6U);
     fa8:	81 b3       	in	r24, 0x11	; 17
     faa:	8f 7b       	andi	r24, 0xBF	; 191
     fac:	81 bb       	out	0x11, r24	; 17
	
	/* Clear Configurations on TCCR1A and TCCR1B */
	*TIMER1_CTRL_REG_A = 0x00U;
     fae:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
     fb0:	1e bc       	out	0x2e, r1	; 46
	
	/* Timer 1 mode is set to normal */
	/* Set Prescaler */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
     fb2:	9e b5       	in	r25, 0x2e	; 46
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	89 2b       	or	r24, r25
     fb8:	8e bd       	out	0x2e, r24	; 46
	
	/* Set Trigger Edge (Falling or Rising) */
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
     fba:	8e b5       	in	r24, 0x2e	; 46
     fbc:	92 81       	ldd	r25, Z+2	; 0x02
     fbe:	40 e4       	ldi	r20, 0x40	; 64
     fc0:	94 9f       	mul	r25, r20
     fc2:	90 01       	movw	r18, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	28 2b       	or	r18, r24
     fc8:	2e bd       	out	0x2e, r18	; 46
	
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
     fca:	29 b7       	in	r18, 0x39	; 57
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	30 e2       	ldi	r19, 0x20	; 32
     fd0:	93 9f       	mul	r25, r19
     fd2:	c0 01       	movw	r24, r0
     fd4:	11 24       	eor	r1, r1
     fd6:	82 2b       	or	r24, r18
     fd8:	89 bf       	out	0x39, r24	; 57
	
	/* Clear Timer 1 and ICR Values */
	*(u16*)TIMER1_CNTR_REG_L = 0x0000U;
     fda:	1d bc       	out	0x2d, r1	; 45
     fdc:	1c bc       	out	0x2c, r1	; 44
	*(u16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
     fde:	17 bc       	out	0x27, r1	; 39
     fe0:	16 bc       	out	0x26, r1	; 38
     fe2:	08 95       	ret

00000fe4 <ICU_SetTriggerEdge>:
}

void ICU_SetTriggerEdge(ICU_TimerChannelNo Timer_Chnl, ICU_TriggerEdgeType Edge) {
	CLR_BIT(*TIMER1_CTRL_REG_B, ICU_TIMER1_EDGE_SELECT_BIT);
     fe4:	9e b5       	in	r25, 0x2e	; 46
     fe6:	9f 7b       	andi	r25, 0xBF	; 191
     fe8:	9e bd       	out	0x2e, r25	; 46
	*TIMER1_CTRL_REG_B |= (Edge<<ICU_TIMER1_EDGE_SELECT_BIT);
     fea:	9e b5       	in	r25, 0x2e	; 46
     fec:	80 e4       	ldi	r24, 0x40	; 64
     fee:	68 9f       	mul	r22, r24
     ff0:	b0 01       	movw	r22, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	69 2b       	or	r22, r25
     ff6:	6e bd       	out	0x2e, r22	; 46
     ff8:	08 95       	ret

00000ffa <ICU_ClearTimerValue>:

}

void ICU_ClearTimerValue(ICU_TimerChannelNo Timer_Chnl) {
	
	*(u16*)TIMER1_CNTR_REG_L = 0x0000U;
     ffa:	1d bc       	out	0x2d, r1	; 45
     ffc:	1c bc       	out	0x2c, r1	; 44
     ffe:	08 95       	ret

00001000 <ICU_GetICUValue>:
	u16 u16Local_Value = 0U;
	u16Local_Value = (*(u16*)TIMER1_INP_CAPT_REG_L);

	
	return u16Local_Value;
}
    1000:	86 b5       	in	r24, 0x26	; 38
    1002:	97 b5       	in	r25, 0x27	; 39
    1004:	08 95       	ret

00001006 <ICU_GetStatus>:



ICU_StatusType ICU_GetStatus(ICU_TimerChannelNo Timer_Chnl) {
	
	if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
    1006:	08 b6       	in	r0, 0x38	; 56
    1008:	05 fe       	sbrs	r0, 5
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <ICU_GetStatus+0x10>
		SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
    100c:	88 b7       	in	r24, 0x38	; 56
    100e:	80 62       	ori	r24, 0x20	; 32
    1010:	88 bf       	out	0x38, r24	; 56
		return ICU_EVENT_CATURED;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	08 95       	ret
	}
	
	else {
		return ICU_RUNNING;
    1016:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return ICU_RUNNING;
}
    1018:	08 95       	ret

0000101a <ICU_GetDutyCycle>:




void ICU_GetDutyCycle(ICU_TimerChannelNo Timer_Chnl, u16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
    101a:	4f 92       	push	r4
    101c:	5f 92       	push	r5
    101e:	6f 92       	push	r6
    1020:	7f 92       	push	r7
    1022:	8f 92       	push	r8
    1024:	9f 92       	push	r9
    1026:	af 92       	push	r10
    1028:	bf 92       	push	r11
    102a:	cf 92       	push	r12
    102c:	df 92       	push	r13
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	eb 01       	movw	r28, r22
    103c:	8a 01       	movw	r16, r20
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    103e:	88 b7       	in	r24, 0x38	; 56
    1040:	80 62       	ori	r24, 0x20	; 32
    1042:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ICU_SetTriggerEdge>
	
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0e 94 03 08 	call	0x1006	; 0x1006 <ICU_GetStatus>
    1052:	88 23       	and	r24, r24
    1054:	d9 f3       	breq	.-10     	; 0x104c <ICU_GetDutyCycle+0x32>
		; // Do Nothing
	}

	u32 u32Local_ON_Counts = 0;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 fd 07 	call	0xffa	; 0xffa <ICU_ClearTimerValue>
	
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    1064:	88 b7       	in	r24, 0x38	; 56
    1066:	80 62       	ori	r24, 0x20	; 32
    1068:	88 bf       	out	0x38, r24	; 56
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		; // Do Nothing
	}

	u32 u32Local_ON_Counts = 0;
    106a:	c1 2c       	mov	r12, r1
    106c:	d1 2c       	mov	r13, r1
    106e:	76 01       	movw	r14, r12
	
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <ICU_GetDutyCycle+0x6a>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
    1072:	08 b6       	in	r0, 0x38	; 56
    1074:	02 fe       	sbrs	r0, 2
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <ICU_GetDutyCycle+0x6a>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
    1078:	88 b7       	in	r24, 0x38	; 56
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	88 bf       	out	0x38, r24	; 56
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	e8 1a       	sub	r14, r24
    1082:	f8 0a       	sbc	r15, r24
	
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 03 08 	call	0x1006	; 0x1006 <ICU_GetStatus>
    108a:	88 23       	and	r24, r24
    108c:	91 f3       	breq	.-28     	; 0x1072 <ICU_GetDutyCycle+0x58>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetICUValue(ICU_TIMER_1);
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	0e 94 00 08 	call	0x1000	; 0x1000 <ICU_GetICUValue>
    1094:	c8 0e       	add	r12, r24
    1096:	d9 1e       	adc	r13, r25
    1098:	e1 1c       	adc	r14, r1
    109a:	f1 1c       	adc	r15, r1

	u32 u32Local_OFF_Counts = 0;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	0e 94 fd 07 	call	0xffa	; 0xffa <ICU_ClearTimerValue>
	
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    10aa:	88 b7       	in	r24, 0x38	; 56
    10ac:	80 62       	ori	r24, 0x20	; 32
    10ae:	88 bf       	out	0x38, r24	; 56
	
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <ICU_GetDutyCycle+0xa4>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
    10b2:	08 b6       	in	r0, 0x38	; 56
    10b4:	02 fe       	sbrs	r0, 2
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <ICU_GetDutyCycle+0xa4>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
    10b8:	88 b7       	in	r24, 0x38	; 56
    10ba:	84 60       	ori	r24, 0x04	; 4
    10bc:	88 bf       	out	0x38, r24	; 56
	
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	0e 94 03 08 	call	0x1006	; 0x1006 <ICU_GetStatus>
    10c4:	88 23       	and	r24, r24
    10c6:	a9 f3       	breq	.-22     	; 0x10b2 <ICU_GetDutyCycle+0x98>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetICUValue(ICU_TIMER_1);
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0e 94 00 08 	call	0x1000	; 0x1000 <ICU_GetICUValue>
    10ce:	4c 01       	movw	r8, r24
    10d0:	a1 2c       	mov	r10, r1
    10d2:	b1 2c       	mov	r11, r1

	Duty_Ptr->High_Time = (f32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
    10d4:	2e 01       	movw	r4, r28
    10d6:	61 2c       	mov	r6, r1
    10d8:	71 2c       	mov	r7, r1
    10da:	a7 01       	movw	r20, r14
    10dc:	96 01       	movw	r18, r12
    10de:	c3 01       	movw	r24, r6
    10e0:	b2 01       	movw	r22, r4
    10e2:	0e 94 39 0b 	call	0x1672	; 0x1672 <__mulsi3>
    10e6:	0e 94 3e 0a 	call	0x147c	; 0x147c <__floatunsisf>
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4a e7       	ldi	r20, 0x7A	; 122
    10f0:	54 e4       	ldi	r21, 0x44	; 68
    10f2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__mulsf3>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	34 e2       	ldi	r19, 0x24	; 36
    10fa:	44 e7       	ldi	r20, 0x74	; 116
    10fc:	5b e4       	ldi	r21, 0x4B	; 75
    10fe:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
    1102:	f8 01       	movw	r30, r16
    1104:	60 83       	st	Z, r22
    1106:	71 83       	std	Z+1, r23	; 0x01
    1108:	82 83       	std	Z+2, r24	; 0x02
    110a:	93 83       	std	Z+3, r25	; 0x03
	Duty_Ptr->Period_Time = (f32)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
    110c:	c7 01       	movw	r24, r14
    110e:	b6 01       	movw	r22, r12
    1110:	68 0d       	add	r22, r8
    1112:	79 1d       	adc	r23, r9
    1114:	8a 1d       	adc	r24, r10
    1116:	9b 1d       	adc	r25, r11
    1118:	a3 01       	movw	r20, r6
    111a:	92 01       	movw	r18, r4
    111c:	0e 94 39 0b 	call	0x1672	; 0x1672 <__mulsi3>
    1120:	0e 94 3e 0a 	call	0x147c	; 0x147c <__floatunsisf>
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a e7       	ldi	r20, 0x7A	; 122
    112a:	54 e4       	ldi	r21, 0x44	; 68
    112c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__mulsf3>
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	34 e2       	ldi	r19, 0x24	; 36
    1134:	44 e7       	ldi	r20, 0x74	; 116
    1136:	5b e4       	ldi	r21, 0x4B	; 75
    1138:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
    113c:	f8 01       	movw	r30, r16
    113e:	64 83       	std	Z+4, r22	; 0x04
    1140:	75 83       	std	Z+5, r23	; 0x05
    1142:	86 83       	std	Z+6, r24	; 0x06
    1144:	97 83       	std	Z+7, r25	; 0x07
}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	7f 90       	pop	r7
    1160:	6f 90       	pop	r6
    1162:	5f 90       	pop	r5
    1164:	4f 90       	pop	r4
    1166:	08 95       	ret

00001168 <PWM_Init>:

/* MCAL */
#include "PWM_interface.h"

void PWM_Init(const PWM_Config* Config_Ptr) {
    1168:	dc 01       	movw	r26, r24
	
	// PWM GENERATED FROM TMR0

	/* Make PB3=OC0 as output */
	SET_BIT(*PORTB_DIR_REG, 3U);
    116a:	87 b3       	in	r24, 0x17	; 23
    116c:	88 60       	ori	r24, 0x08	; 8
    116e:	87 bb       	out	0x17, r24	; 23
	
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
    1170:	13 be       	out	0x33, r1	; 51
	
	/* Set PWM Mode */
	*TIMER0_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_0_FAST_BIT);
    1172:	23 b7       	in	r18, 0x33	; 51
    1174:	11 96       	adiw	r26, 0x01	; 1
    1176:	9c 91       	ld	r25, X
    1178:	11 97       	sbiw	r26, 0x01	; 1
    117a:	99 0f       	add	r25, r25
    117c:	99 0f       	add	r25, r25
    117e:	99 0f       	add	r25, r25
    1180:	92 2b       	or	r25, r18
    1182:	90 64       	ori	r25, 0x40	; 64
    1184:	93 bf       	out	0x33, r25	; 51
	
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_0_INVERTING_BIT);
    1186:	23 b7       	in	r18, 0x33	; 51
    1188:	13 96       	adiw	r26, 0x03	; 3
    118a:	9c 91       	ld	r25, X
    118c:	13 97       	sbiw	r26, 0x03	; 3
    118e:	92 95       	swap	r25
    1190:	90 7f       	andi	r25, 0xF0	; 240
    1192:	92 2b       	or	r25, r18
    1194:	90 62       	ori	r25, 0x20	; 32
    1196:	93 bf       	out	0x33, r25	; 51
	
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	8c 91       	ld	r24, X
    119c:	12 97       	sbiw	r26, 0x02	; 2
    119e:	48 2f       	mov	r20, r24
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	48 30       	cpi	r20, 0x08	; 8
    11a4:	51 05       	cpc	r21, r1
    11a6:	e8 f4       	brcc	.+58     	; 0x11e2 <PWM_Init+0x7a>
    11a8:	fa 01       	movw	r30, r20
    11aa:	eb 57       	subi	r30, 0x7B	; 123
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__tablejump2__>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
    11b2:	93 b7       	in	r25, 0x33	; 51
    11b4:	89 2b       	or	r24, r25
    11b6:	83 bf       	out	0x33, r24	; 51
    11b8:	14 c0       	rjmp	.+40     	; 0x11e2 <PWM_Init+0x7a>
		case PWM_PRESCALE_8:
		*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
    11ba:	93 b7       	in	r25, 0x33	; 51
    11bc:	89 2b       	or	r24, r25
    11be:	83 bf       	out	0x33, r24	; 51
    11c0:	10 c0       	rjmp	.+32     	; 0x11e2 <PWM_Init+0x7a>
		case PWM_PRESCALE_64:
		*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)); break;
    11c2:	93 b7       	in	r25, 0x33	; 51
    11c4:	89 2b       	or	r24, r25
    11c6:	83 bf       	out	0x33, r24	; 51
    11c8:	0c c0       	rjmp	.+24     	; 0x11e2 <PWM_Init+0x7a>
		case PWM_PRESCALE_256:
		*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)); break;
    11ca:	93 b7       	in	r25, 0x33	; 51
    11cc:	89 2b       	or	r24, r25
    11ce:	83 bf       	out	0x33, r24	; 51
    11d0:	08 c0       	rjmp	.+16     	; 0x11e2 <PWM_Init+0x7a>
		case PWM_PRESCALE_1024:
		*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)); break;
    11d2:	93 b7       	in	r25, 0x33	; 51
    11d4:	89 2b       	or	r24, r25
    11d6:	83 bf       	out	0x33, r24	; 51
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <PWM_Init+0x7a>
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
		*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
    11da:	93 b7       	in	r25, 0x33	; 51
    11dc:	82 50       	subi	r24, 0x02	; 2
    11de:	89 2b       	or	r24, r25
    11e0:	83 bf       	out	0x33, r24	; 51
		default: break;
	}
	
	
	/* Set Duty Value in OCR0 Register */
	*TIMER0_CMP_REG = 0x00U;
    11e2:	1c be       	out	0x3c, r1	; 60
	switch (Config_Ptr->State) {
    11e4:	13 96       	adiw	r26, 0x03	; 3
    11e6:	8c 91       	ld	r24, X
    11e8:	13 97       	sbiw	r26, 0x03	; 3
    11ea:	88 23       	and	r24, r24
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <PWM_Init+0x8c>
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	b9 f0       	breq	.+46     	; 0x1220 <PWM_Init+0xb8>
    11f2:	34 c0       	rjmp	.+104    	; 0x125c <PWM_Init+0xf4>
		case PWM_NON_INVERTED: *TIMER0_CMP_REG = (u8)((Config_Ptr->Duty_Percent) * PWM_TIMER_0_RES / 100.0); break;
    11f4:	16 96       	adiw	r26, 0x06	; 6
    11f6:	6c 91       	ld	r22, X
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	68 9f       	mul	r22, r24
    11fc:	b0 01       	movw	r22, r0
    11fe:	11 24       	eor	r1, r1
    1200:	07 2e       	mov	r0, r23
    1202:	00 0c       	add	r0, r0
    1204:	88 0b       	sbc	r24, r24
    1206:	99 0b       	sbc	r25, r25
    1208:	0e 94 40 0a 	call	0x1480	; 0x1480 <__floatsisf>
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	48 ec       	ldi	r20, 0xC8	; 200
    1212:	52 e4       	ldi	r21, 0x42	; 66
    1214:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
    1218:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
    121c:	6c bf       	out	0x3c, r22	; 60
    121e:	1e c0       	rjmp	.+60     	; 0x125c <PWM_Init+0xf4>
		case PWM_INVERTED: *TIMER0_CMP_REG = (u8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_0_RES / 100.0); break;
    1220:	16 96       	adiw	r26, 0x06	; 6
    1222:	6c 91       	ld	r22, X
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 40 0a 	call	0x1480	; 0x1480 <__floatsisf>
    122e:	9b 01       	movw	r18, r22
    1230:	ac 01       	movw	r20, r24
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	88 ec       	ldi	r24, 0xC8	; 200
    1238:	92 e4       	ldi	r25, 0x42	; 66
    123a:	0e 94 30 09 	call	0x1260	; 0x1260 <__subsf3>
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	53 e4       	ldi	r21, 0x43	; 67
    1246:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__mulsf3>
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	48 ec       	ldi	r20, 0xC8	; 200
    1250:	52 e4       	ldi	r21, 0x42	; 66
    1252:	0e 94 9d 09 	call	0x133a	; 0x133a <__divsf3>
    1256:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fixunssfsi>
    125a:	6c bf       	out	0x3c, r22	; 60
		default: break;
	}
	
	/* Clear TCNT0 Register Configurations */
	*TIMER0_CNTR_REG = 0x00U;
    125c:	12 be       	out	0x32, r1	; 50
    125e:	08 95       	ret

00001260 <__subsf3>:
    1260:	50 58       	subi	r21, 0x80	; 128

00001262 <__addsf3>:
    1262:	bb 27       	eor	r27, r27
    1264:	aa 27       	eor	r26, r26
    1266:	0e 94 48 09 	call	0x1290	; 0x1290 <__addsf3x>
    126a:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_round>
    126e:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_pscA>
    1272:	38 f0       	brcs	.+14     	; 0x1282 <__addsf3+0x20>
    1274:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__fp_pscB>
    1278:	20 f0       	brcs	.+8      	; 0x1282 <__addsf3+0x20>
    127a:	39 f4       	brne	.+14     	; 0x128a <__addsf3+0x28>
    127c:	9f 3f       	cpi	r25, 0xFF	; 255
    127e:	19 f4       	brne	.+6      	; 0x1286 <__addsf3+0x24>
    1280:	26 f4       	brtc	.+8      	; 0x128a <__addsf3+0x28>
    1282:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__fp_nan>
    1286:	0e f4       	brtc	.+2      	; 0x128a <__addsf3+0x28>
    1288:	e0 95       	com	r30
    128a:	e7 fb       	bst	r30, 7
    128c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_inf>

00001290 <__addsf3x>:
    1290:	e9 2f       	mov	r30, r25
    1292:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__fp_split3>
    1296:	58 f3       	brcs	.-42     	; 0x126e <__addsf3+0xc>
    1298:	ba 17       	cp	r27, r26
    129a:	62 07       	cpc	r22, r18
    129c:	73 07       	cpc	r23, r19
    129e:	84 07       	cpc	r24, r20
    12a0:	95 07       	cpc	r25, r21
    12a2:	20 f0       	brcs	.+8      	; 0x12ac <__addsf3x+0x1c>
    12a4:	79 f4       	brne	.+30     	; 0x12c4 <__addsf3x+0x34>
    12a6:	a6 f5       	brtc	.+104    	; 0x1310 <__addsf3x+0x80>
    12a8:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_zero>
    12ac:	0e f4       	brtc	.+2      	; 0x12b0 <__addsf3x+0x20>
    12ae:	e0 95       	com	r30
    12b0:	0b 2e       	mov	r0, r27
    12b2:	ba 2f       	mov	r27, r26
    12b4:	a0 2d       	mov	r26, r0
    12b6:	0b 01       	movw	r0, r22
    12b8:	b9 01       	movw	r22, r18
    12ba:	90 01       	movw	r18, r0
    12bc:	0c 01       	movw	r0, r24
    12be:	ca 01       	movw	r24, r20
    12c0:	a0 01       	movw	r20, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	ff 27       	eor	r31, r31
    12c6:	59 1b       	sub	r21, r25
    12c8:	99 f0       	breq	.+38     	; 0x12f0 <__addsf3x+0x60>
    12ca:	59 3f       	cpi	r21, 0xF9	; 249
    12cc:	50 f4       	brcc	.+20     	; 0x12e2 <__addsf3x+0x52>
    12ce:	50 3e       	cpi	r21, 0xE0	; 224
    12d0:	68 f1       	brcs	.+90     	; 0x132c <__addsf3x+0x9c>
    12d2:	1a 16       	cp	r1, r26
    12d4:	f0 40       	sbci	r31, 0x00	; 0
    12d6:	a2 2f       	mov	r26, r18
    12d8:	23 2f       	mov	r18, r19
    12da:	34 2f       	mov	r19, r20
    12dc:	44 27       	eor	r20, r20
    12de:	58 5f       	subi	r21, 0xF8	; 248
    12e0:	f3 cf       	rjmp	.-26     	; 0x12c8 <__addsf3x+0x38>
    12e2:	46 95       	lsr	r20
    12e4:	37 95       	ror	r19
    12e6:	27 95       	ror	r18
    12e8:	a7 95       	ror	r26
    12ea:	f0 40       	sbci	r31, 0x00	; 0
    12ec:	53 95       	inc	r21
    12ee:	c9 f7       	brne	.-14     	; 0x12e2 <__addsf3x+0x52>
    12f0:	7e f4       	brtc	.+30     	; 0x1310 <__addsf3x+0x80>
    12f2:	1f 16       	cp	r1, r31
    12f4:	ba 0b       	sbc	r27, r26
    12f6:	62 0b       	sbc	r22, r18
    12f8:	73 0b       	sbc	r23, r19
    12fa:	84 0b       	sbc	r24, r20
    12fc:	ba f0       	brmi	.+46     	; 0x132c <__addsf3x+0x9c>
    12fe:	91 50       	subi	r25, 0x01	; 1
    1300:	a1 f0       	breq	.+40     	; 0x132a <__addsf3x+0x9a>
    1302:	ff 0f       	add	r31, r31
    1304:	bb 1f       	adc	r27, r27
    1306:	66 1f       	adc	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	c2 f7       	brpl	.-16     	; 0x12fe <__addsf3x+0x6e>
    130e:	0e c0       	rjmp	.+28     	; 0x132c <__addsf3x+0x9c>
    1310:	ba 0f       	add	r27, r26
    1312:	62 1f       	adc	r22, r18
    1314:	73 1f       	adc	r23, r19
    1316:	84 1f       	adc	r24, r20
    1318:	48 f4       	brcc	.+18     	; 0x132c <__addsf3x+0x9c>
    131a:	87 95       	ror	r24
    131c:	77 95       	ror	r23
    131e:	67 95       	ror	r22
    1320:	b7 95       	ror	r27
    1322:	f7 95       	ror	r31
    1324:	9e 3f       	cpi	r25, 0xFE	; 254
    1326:	08 f0       	brcs	.+2      	; 0x132a <__addsf3x+0x9a>
    1328:	b0 cf       	rjmp	.-160    	; 0x128a <__addsf3+0x28>
    132a:	93 95       	inc	r25
    132c:	88 0f       	add	r24, r24
    132e:	08 f0       	brcs	.+2      	; 0x1332 <__addsf3x+0xa2>
    1330:	99 27       	eor	r25, r25
    1332:	ee 0f       	add	r30, r30
    1334:	97 95       	ror	r25
    1336:	87 95       	ror	r24
    1338:	08 95       	ret

0000133a <__divsf3>:
    133a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__divsf3x>
    133e:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_round>
    1342:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__fp_pscB>
    1346:	58 f0       	brcs	.+22     	; 0x135e <__divsf3+0x24>
    1348:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_pscA>
    134c:	40 f0       	brcs	.+16     	; 0x135e <__divsf3+0x24>
    134e:	29 f4       	brne	.+10     	; 0x135a <__divsf3+0x20>
    1350:	5f 3f       	cpi	r21, 0xFF	; 255
    1352:	29 f0       	breq	.+10     	; 0x135e <__divsf3+0x24>
    1354:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_inf>
    1358:	51 11       	cpse	r21, r1
    135a:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__fp_szero>
    135e:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__fp_nan>

00001362 <__divsf3x>:
    1362:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__fp_split3>
    1366:	68 f3       	brcs	.-38     	; 0x1342 <__divsf3+0x8>

00001368 <__divsf3_pse>:
    1368:	99 23       	and	r25, r25
    136a:	b1 f3       	breq	.-20     	; 0x1358 <__divsf3+0x1e>
    136c:	55 23       	and	r21, r21
    136e:	91 f3       	breq	.-28     	; 0x1354 <__divsf3+0x1a>
    1370:	95 1b       	sub	r25, r21
    1372:	55 0b       	sbc	r21, r21
    1374:	bb 27       	eor	r27, r27
    1376:	aa 27       	eor	r26, r26
    1378:	62 17       	cp	r22, r18
    137a:	73 07       	cpc	r23, r19
    137c:	84 07       	cpc	r24, r20
    137e:	38 f0       	brcs	.+14     	; 0x138e <__divsf3_pse+0x26>
    1380:	9f 5f       	subi	r25, 0xFF	; 255
    1382:	5f 4f       	sbci	r21, 0xFF	; 255
    1384:	22 0f       	add	r18, r18
    1386:	33 1f       	adc	r19, r19
    1388:	44 1f       	adc	r20, r20
    138a:	aa 1f       	adc	r26, r26
    138c:	a9 f3       	breq	.-22     	; 0x1378 <__divsf3_pse+0x10>
    138e:	35 d0       	rcall	.+106    	; 0x13fa <__divsf3_pse+0x92>
    1390:	0e 2e       	mov	r0, r30
    1392:	3a f0       	brmi	.+14     	; 0x13a2 <__divsf3_pse+0x3a>
    1394:	e0 e8       	ldi	r30, 0x80	; 128
    1396:	32 d0       	rcall	.+100    	; 0x13fc <__divsf3_pse+0x94>
    1398:	91 50       	subi	r25, 0x01	; 1
    139a:	50 40       	sbci	r21, 0x00	; 0
    139c:	e6 95       	lsr	r30
    139e:	00 1c       	adc	r0, r0
    13a0:	ca f7       	brpl	.-14     	; 0x1394 <__divsf3_pse+0x2c>
    13a2:	2b d0       	rcall	.+86     	; 0x13fa <__divsf3_pse+0x92>
    13a4:	fe 2f       	mov	r31, r30
    13a6:	29 d0       	rcall	.+82     	; 0x13fa <__divsf3_pse+0x92>
    13a8:	66 0f       	add	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	bb 1f       	adc	r27, r27
    13b0:	26 17       	cp	r18, r22
    13b2:	37 07       	cpc	r19, r23
    13b4:	48 07       	cpc	r20, r24
    13b6:	ab 07       	cpc	r26, r27
    13b8:	b0 e8       	ldi	r27, 0x80	; 128
    13ba:	09 f0       	breq	.+2      	; 0x13be <__divsf3_pse+0x56>
    13bc:	bb 0b       	sbc	r27, r27
    13be:	80 2d       	mov	r24, r0
    13c0:	bf 01       	movw	r22, r30
    13c2:	ff 27       	eor	r31, r31
    13c4:	93 58       	subi	r25, 0x83	; 131
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	3a f0       	brmi	.+14     	; 0x13d8 <__divsf3_pse+0x70>
    13ca:	9e 3f       	cpi	r25, 0xFE	; 254
    13cc:	51 05       	cpc	r21, r1
    13ce:	78 f0       	brcs	.+30     	; 0x13ee <__divsf3_pse+0x86>
    13d0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_inf>
    13d4:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__fp_szero>
    13d8:	5f 3f       	cpi	r21, 0xFF	; 255
    13da:	e4 f3       	brlt	.-8      	; 0x13d4 <__divsf3_pse+0x6c>
    13dc:	98 3e       	cpi	r25, 0xE8	; 232
    13de:	d4 f3       	brlt	.-12     	; 0x13d4 <__divsf3_pse+0x6c>
    13e0:	86 95       	lsr	r24
    13e2:	77 95       	ror	r23
    13e4:	67 95       	ror	r22
    13e6:	b7 95       	ror	r27
    13e8:	f7 95       	ror	r31
    13ea:	9f 5f       	subi	r25, 0xFF	; 255
    13ec:	c9 f7       	brne	.-14     	; 0x13e0 <__divsf3_pse+0x78>
    13ee:	88 0f       	add	r24, r24
    13f0:	91 1d       	adc	r25, r1
    13f2:	96 95       	lsr	r25
    13f4:	87 95       	ror	r24
    13f6:	97 f9       	bld	r25, 7
    13f8:	08 95       	ret
    13fa:	e1 e0       	ldi	r30, 0x01	; 1
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	bb 1f       	adc	r27, r27
    1404:	62 17       	cp	r22, r18
    1406:	73 07       	cpc	r23, r19
    1408:	84 07       	cpc	r24, r20
    140a:	ba 07       	cpc	r27, r26
    140c:	20 f0       	brcs	.+8      	; 0x1416 <__divsf3_pse+0xae>
    140e:	62 1b       	sub	r22, r18
    1410:	73 0b       	sbc	r23, r19
    1412:	84 0b       	sbc	r24, r20
    1414:	ba 0b       	sbc	r27, r26
    1416:	ee 1f       	adc	r30, r30
    1418:	88 f7       	brcc	.-30     	; 0x13fc <__divsf3_pse+0x94>
    141a:	e0 95       	com	r30
    141c:	08 95       	ret

0000141e <__fixunssfsi>:
    141e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fp_splitA>
    1422:	88 f0       	brcs	.+34     	; 0x1446 <__fixunssfsi+0x28>
    1424:	9f 57       	subi	r25, 0x7F	; 127
    1426:	98 f0       	brcs	.+38     	; 0x144e <__fixunssfsi+0x30>
    1428:	b9 2f       	mov	r27, r25
    142a:	99 27       	eor	r25, r25
    142c:	b7 51       	subi	r27, 0x17	; 23
    142e:	b0 f0       	brcs	.+44     	; 0x145c <__fixunssfsi+0x3e>
    1430:	e1 f0       	breq	.+56     	; 0x146a <__fixunssfsi+0x4c>
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	1a f0       	brmi	.+6      	; 0x1442 <__fixunssfsi+0x24>
    143c:	ba 95       	dec	r27
    143e:	c9 f7       	brne	.-14     	; 0x1432 <__fixunssfsi+0x14>
    1440:	14 c0       	rjmp	.+40     	; 0x146a <__fixunssfsi+0x4c>
    1442:	b1 30       	cpi	r27, 0x01	; 1
    1444:	91 f0       	breq	.+36     	; 0x146a <__fixunssfsi+0x4c>
    1446:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_zero>
    144a:	b1 e0       	ldi	r27, 0x01	; 1
    144c:	08 95       	ret
    144e:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_zero>
    1452:	67 2f       	mov	r22, r23
    1454:	78 2f       	mov	r23, r24
    1456:	88 27       	eor	r24, r24
    1458:	b8 5f       	subi	r27, 0xF8	; 248
    145a:	39 f0       	breq	.+14     	; 0x146a <__fixunssfsi+0x4c>
    145c:	b9 3f       	cpi	r27, 0xF9	; 249
    145e:	cc f3       	brlt	.-14     	; 0x1452 <__fixunssfsi+0x34>
    1460:	86 95       	lsr	r24
    1462:	77 95       	ror	r23
    1464:	67 95       	ror	r22
    1466:	b3 95       	inc	r27
    1468:	d9 f7       	brne	.-10     	; 0x1460 <__fixunssfsi+0x42>
    146a:	3e f4       	brtc	.+14     	; 0x147a <__fixunssfsi+0x5c>
    146c:	90 95       	com	r25
    146e:	80 95       	com	r24
    1470:	70 95       	com	r23
    1472:	61 95       	neg	r22
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	8f 4f       	sbci	r24, 0xFF	; 255
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <__floatunsisf>:
    147c:	e8 94       	clt
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <__floatsisf+0x12>

00001480 <__floatsisf>:
    1480:	97 fb       	bst	r25, 7
    1482:	3e f4       	brtc	.+14     	; 0x1492 <__floatsisf+0x12>
    1484:	90 95       	com	r25
    1486:	80 95       	com	r24
    1488:	70 95       	com	r23
    148a:	61 95       	neg	r22
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	99 23       	and	r25, r25
    1494:	a9 f0       	breq	.+42     	; 0x14c0 <__floatsisf+0x40>
    1496:	f9 2f       	mov	r31, r25
    1498:	96 e9       	ldi	r25, 0x96	; 150
    149a:	bb 27       	eor	r27, r27
    149c:	93 95       	inc	r25
    149e:	f6 95       	lsr	r31
    14a0:	87 95       	ror	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f1 11       	cpse	r31, r1
    14aa:	f8 cf       	rjmp	.-16     	; 0x149c <__floatsisf+0x1c>
    14ac:	fa f4       	brpl	.+62     	; 0x14ec <__floatsisf+0x6c>
    14ae:	bb 0f       	add	r27, r27
    14b0:	11 f4       	brne	.+4      	; 0x14b6 <__floatsisf+0x36>
    14b2:	60 ff       	sbrs	r22, 0
    14b4:	1b c0       	rjmp	.+54     	; 0x14ec <__floatsisf+0x6c>
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	8f 4f       	sbci	r24, 0xFF	; 255
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	16 c0       	rjmp	.+44     	; 0x14ec <__floatsisf+0x6c>
    14c0:	88 23       	and	r24, r24
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <__floatsisf+0x48>
    14c4:	96 e9       	ldi	r25, 0x96	; 150
    14c6:	11 c0       	rjmp	.+34     	; 0x14ea <__floatsisf+0x6a>
    14c8:	77 23       	and	r23, r23
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <__floatsisf+0x54>
    14cc:	9e e8       	ldi	r25, 0x8E	; 142
    14ce:	87 2f       	mov	r24, r23
    14d0:	76 2f       	mov	r23, r22
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <__floatsisf+0x5e>
    14d4:	66 23       	and	r22, r22
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <__floatsisf+0x74>
    14d8:	96 e8       	ldi	r25, 0x86	; 134
    14da:	86 2f       	mov	r24, r22
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	2a f0       	brmi	.+10     	; 0x14ec <__floatsisf+0x6c>
    14e2:	9a 95       	dec	r25
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	da f7       	brpl	.-10     	; 0x14e2 <__floatsisf+0x62>
    14ec:	88 0f       	add	r24, r24
    14ee:	96 95       	lsr	r25
    14f0:	87 95       	ror	r24
    14f2:	97 f9       	bld	r25, 7
    14f4:	08 95       	ret

000014f6 <__fp_inf>:
    14f6:	97 f9       	bld	r25, 7
    14f8:	9f 67       	ori	r25, 0x7F	; 127
    14fa:	80 e8       	ldi	r24, 0x80	; 128
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	08 95       	ret

00001502 <__fp_nan>:
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	80 ec       	ldi	r24, 0xC0	; 192
    1506:	08 95       	ret

00001508 <__fp_pscA>:
    1508:	00 24       	eor	r0, r0
    150a:	0a 94       	dec	r0
    150c:	16 16       	cp	r1, r22
    150e:	17 06       	cpc	r1, r23
    1510:	18 06       	cpc	r1, r24
    1512:	09 06       	cpc	r0, r25
    1514:	08 95       	ret

00001516 <__fp_pscB>:
    1516:	00 24       	eor	r0, r0
    1518:	0a 94       	dec	r0
    151a:	12 16       	cp	r1, r18
    151c:	13 06       	cpc	r1, r19
    151e:	14 06       	cpc	r1, r20
    1520:	05 06       	cpc	r0, r21
    1522:	08 95       	ret

00001524 <__fp_round>:
    1524:	09 2e       	mov	r0, r25
    1526:	03 94       	inc	r0
    1528:	00 0c       	add	r0, r0
    152a:	11 f4       	brne	.+4      	; 0x1530 <__fp_round+0xc>
    152c:	88 23       	and	r24, r24
    152e:	52 f0       	brmi	.+20     	; 0x1544 <__fp_round+0x20>
    1530:	bb 0f       	add	r27, r27
    1532:	40 f4       	brcc	.+16     	; 0x1544 <__fp_round+0x20>
    1534:	bf 2b       	or	r27, r31
    1536:	11 f4       	brne	.+4      	; 0x153c <__fp_round+0x18>
    1538:	60 ff       	sbrs	r22, 0
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <__fp_round+0x20>
    153c:	6f 5f       	subi	r22, 0xFF	; 255
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	08 95       	ret

00001546 <__fp_split3>:
    1546:	57 fd       	sbrc	r21, 7
    1548:	90 58       	subi	r25, 0x80	; 128
    154a:	44 0f       	add	r20, r20
    154c:	55 1f       	adc	r21, r21
    154e:	59 f0       	breq	.+22     	; 0x1566 <__fp_splitA+0x10>
    1550:	5f 3f       	cpi	r21, 0xFF	; 255
    1552:	71 f0       	breq	.+28     	; 0x1570 <__fp_splitA+0x1a>
    1554:	47 95       	ror	r20

00001556 <__fp_splitA>:
    1556:	88 0f       	add	r24, r24
    1558:	97 fb       	bst	r25, 7
    155a:	99 1f       	adc	r25, r25
    155c:	61 f0       	breq	.+24     	; 0x1576 <__fp_splitA+0x20>
    155e:	9f 3f       	cpi	r25, 0xFF	; 255
    1560:	79 f0       	breq	.+30     	; 0x1580 <__fp_splitA+0x2a>
    1562:	87 95       	ror	r24
    1564:	08 95       	ret
    1566:	12 16       	cp	r1, r18
    1568:	13 06       	cpc	r1, r19
    156a:	14 06       	cpc	r1, r20
    156c:	55 1f       	adc	r21, r21
    156e:	f2 cf       	rjmp	.-28     	; 0x1554 <__fp_split3+0xe>
    1570:	46 95       	lsr	r20
    1572:	f1 df       	rcall	.-30     	; 0x1556 <__fp_splitA>
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <__fp_splitA+0x30>
    1576:	16 16       	cp	r1, r22
    1578:	17 06       	cpc	r1, r23
    157a:	18 06       	cpc	r1, r24
    157c:	99 1f       	adc	r25, r25
    157e:	f1 cf       	rjmp	.-30     	; 0x1562 <__fp_splitA+0xc>
    1580:	86 95       	lsr	r24
    1582:	71 05       	cpc	r23, r1
    1584:	61 05       	cpc	r22, r1
    1586:	08 94       	sec
    1588:	08 95       	ret

0000158a <__fp_zero>:
    158a:	e8 94       	clt

0000158c <__fp_szero>:
    158c:	bb 27       	eor	r27, r27
    158e:	66 27       	eor	r22, r22
    1590:	77 27       	eor	r23, r23
    1592:	cb 01       	movw	r24, r22
    1594:	97 f9       	bld	r25, 7
    1596:	08 95       	ret

00001598 <__mulsf3>:
    1598:	0e 94 df 0a 	call	0x15be	; 0x15be <__mulsf3x>
    159c:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_round>
    15a0:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_pscA>
    15a4:	38 f0       	brcs	.+14     	; 0x15b4 <__mulsf3+0x1c>
    15a6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__fp_pscB>
    15aa:	20 f0       	brcs	.+8      	; 0x15b4 <__mulsf3+0x1c>
    15ac:	95 23       	and	r25, r21
    15ae:	11 f0       	breq	.+4      	; 0x15b4 <__mulsf3+0x1c>
    15b0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_inf>
    15b4:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__fp_nan>
    15b8:	11 24       	eor	r1, r1
    15ba:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__fp_szero>

000015be <__mulsf3x>:
    15be:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__fp_split3>
    15c2:	70 f3       	brcs	.-36     	; 0x15a0 <__mulsf3+0x8>

000015c4 <__mulsf3_pse>:
    15c4:	95 9f       	mul	r25, r21
    15c6:	c1 f3       	breq	.-16     	; 0x15b8 <__mulsf3+0x20>
    15c8:	95 0f       	add	r25, r21
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	55 1f       	adc	r21, r21
    15ce:	62 9f       	mul	r22, r18
    15d0:	f0 01       	movw	r30, r0
    15d2:	72 9f       	mul	r23, r18
    15d4:	bb 27       	eor	r27, r27
    15d6:	f0 0d       	add	r31, r0
    15d8:	b1 1d       	adc	r27, r1
    15da:	63 9f       	mul	r22, r19
    15dc:	aa 27       	eor	r26, r26
    15de:	f0 0d       	add	r31, r0
    15e0:	b1 1d       	adc	r27, r1
    15e2:	aa 1f       	adc	r26, r26
    15e4:	64 9f       	mul	r22, r20
    15e6:	66 27       	eor	r22, r22
    15e8:	b0 0d       	add	r27, r0
    15ea:	a1 1d       	adc	r26, r1
    15ec:	66 1f       	adc	r22, r22
    15ee:	82 9f       	mul	r24, r18
    15f0:	22 27       	eor	r18, r18
    15f2:	b0 0d       	add	r27, r0
    15f4:	a1 1d       	adc	r26, r1
    15f6:	62 1f       	adc	r22, r18
    15f8:	73 9f       	mul	r23, r19
    15fa:	b0 0d       	add	r27, r0
    15fc:	a1 1d       	adc	r26, r1
    15fe:	62 1f       	adc	r22, r18
    1600:	83 9f       	mul	r24, r19
    1602:	a0 0d       	add	r26, r0
    1604:	61 1d       	adc	r22, r1
    1606:	22 1f       	adc	r18, r18
    1608:	74 9f       	mul	r23, r20
    160a:	33 27       	eor	r19, r19
    160c:	a0 0d       	add	r26, r0
    160e:	61 1d       	adc	r22, r1
    1610:	23 1f       	adc	r18, r19
    1612:	84 9f       	mul	r24, r20
    1614:	60 0d       	add	r22, r0
    1616:	21 1d       	adc	r18, r1
    1618:	82 2f       	mov	r24, r18
    161a:	76 2f       	mov	r23, r22
    161c:	6a 2f       	mov	r22, r26
    161e:	11 24       	eor	r1, r1
    1620:	9f 57       	subi	r25, 0x7F	; 127
    1622:	50 40       	sbci	r21, 0x00	; 0
    1624:	9a f0       	brmi	.+38     	; 0x164c <__mulsf3_pse+0x88>
    1626:	f1 f0       	breq	.+60     	; 0x1664 <__mulsf3_pse+0xa0>
    1628:	88 23       	and	r24, r24
    162a:	4a f0       	brmi	.+18     	; 0x163e <__mulsf3_pse+0x7a>
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	bb 1f       	adc	r27, r27
    1632:	66 1f       	adc	r22, r22
    1634:	77 1f       	adc	r23, r23
    1636:	88 1f       	adc	r24, r24
    1638:	91 50       	subi	r25, 0x01	; 1
    163a:	50 40       	sbci	r21, 0x00	; 0
    163c:	a9 f7       	brne	.-22     	; 0x1628 <__mulsf3_pse+0x64>
    163e:	9e 3f       	cpi	r25, 0xFE	; 254
    1640:	51 05       	cpc	r21, r1
    1642:	80 f0       	brcs	.+32     	; 0x1664 <__mulsf3_pse+0xa0>
    1644:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_inf>
    1648:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__fp_szero>
    164c:	5f 3f       	cpi	r21, 0xFF	; 255
    164e:	e4 f3       	brlt	.-8      	; 0x1648 <__mulsf3_pse+0x84>
    1650:	98 3e       	cpi	r25, 0xE8	; 232
    1652:	d4 f3       	brlt	.-12     	; 0x1648 <__mulsf3_pse+0x84>
    1654:	86 95       	lsr	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	b7 95       	ror	r27
    165c:	f7 95       	ror	r31
    165e:	e7 95       	ror	r30
    1660:	9f 5f       	subi	r25, 0xFF	; 255
    1662:	c1 f7       	brne	.-16     	; 0x1654 <__mulsf3_pse+0x90>
    1664:	fe 2b       	or	r31, r30
    1666:	88 0f       	add	r24, r24
    1668:	91 1d       	adc	r25, r1
    166a:	96 95       	lsr	r25
    166c:	87 95       	ror	r24
    166e:	97 f9       	bld	r25, 7
    1670:	08 95       	ret

00001672 <__mulsi3>:
    1672:	db 01       	movw	r26, r22
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__muluhisi3>
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	a2 9f       	mul	r26, r18
    1682:	80 0d       	add	r24, r0
    1684:	91 1d       	adc	r25, r1
    1686:	a3 9f       	mul	r26, r19
    1688:	90 0d       	add	r25, r0
    168a:	b2 9f       	mul	r27, r18
    168c:	90 0d       	add	r25, r0
    168e:	11 24       	eor	r1, r1
    1690:	08 95       	ret

00001692 <__divmodsi4>:
    1692:	05 2e       	mov	r0, r21
    1694:	97 fb       	bst	r25, 7
    1696:	1e f4       	brtc	.+6      	; 0x169e <__divmodsi4+0xc>
    1698:	00 94       	com	r0
    169a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__negsi2>
    169e:	57 fd       	sbrc	r21, 7
    16a0:	07 d0       	rcall	.+14     	; 0x16b0 <__divmodsi4_neg2>
    16a2:	0e 94 97 0b 	call	0x172e	; 0x172e <__udivmodsi4>
    16a6:	07 fc       	sbrc	r0, 7
    16a8:	03 d0       	rcall	.+6      	; 0x16b0 <__divmodsi4_neg2>
    16aa:	4e f4       	brtc	.+18     	; 0x16be <__divmodsi4_exit>
    16ac:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__negsi2>

000016b0 <__divmodsi4_neg2>:
    16b0:	50 95       	com	r21
    16b2:	40 95       	com	r20
    16b4:	30 95       	com	r19
    16b6:	21 95       	neg	r18
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	4f 4f       	sbci	r20, 0xFF	; 255
    16bc:	5f 4f       	sbci	r21, 0xFF	; 255

000016be <__divmodsi4_exit>:
    16be:	08 95       	ret

000016c0 <__negsi2>:
    16c0:	90 95       	com	r25
    16c2:	80 95       	com	r24
    16c4:	70 95       	com	r23
    16c6:	61 95       	neg	r22
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	08 95       	ret

000016d0 <__tablejump2__>:
    16d0:	ee 0f       	add	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	05 90       	lpm	r0, Z+
    16d6:	f4 91       	lpm	r31, Z
    16d8:	e0 2d       	mov	r30, r0
    16da:	09 94       	ijmp

000016dc <__muluhisi3>:
    16dc:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__umulhisi3>
    16e0:	a5 9f       	mul	r26, r21
    16e2:	90 0d       	add	r25, r0
    16e4:	b4 9f       	mul	r27, r20
    16e6:	90 0d       	add	r25, r0
    16e8:	a4 9f       	mul	r26, r20
    16ea:	80 0d       	add	r24, r0
    16ec:	91 1d       	adc	r25, r1
    16ee:	11 24       	eor	r1, r1
    16f0:	08 95       	ret

000016f2 <__ashrdi3>:
    16f2:	97 fb       	bst	r25, 7
    16f4:	10 f8       	bld	r1, 0

000016f6 <__lshrdi3>:
    16f6:	16 94       	lsr	r1
    16f8:	00 08       	sbc	r0, r0
    16fa:	0f 93       	push	r16
    16fc:	08 30       	cpi	r16, 0x08	; 8
    16fe:	98 f0       	brcs	.+38     	; 0x1726 <__lshrdi3+0x30>
    1700:	08 50       	subi	r16, 0x08	; 8
    1702:	23 2f       	mov	r18, r19
    1704:	34 2f       	mov	r19, r20
    1706:	45 2f       	mov	r20, r21
    1708:	56 2f       	mov	r21, r22
    170a:	67 2f       	mov	r22, r23
    170c:	78 2f       	mov	r23, r24
    170e:	89 2f       	mov	r24, r25
    1710:	90 2d       	mov	r25, r0
    1712:	f4 cf       	rjmp	.-24     	; 0x16fc <__lshrdi3+0x6>
    1714:	05 94       	asr	r0
    1716:	97 95       	ror	r25
    1718:	87 95       	ror	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	57 95       	ror	r21
    1720:	47 95       	ror	r20
    1722:	37 95       	ror	r19
    1724:	27 95       	ror	r18
    1726:	0a 95       	dec	r16
    1728:	aa f7       	brpl	.-22     	; 0x1714 <__lshrdi3+0x1e>
    172a:	0f 91       	pop	r16
    172c:	08 95       	ret

0000172e <__udivmodsi4>:
    172e:	a1 e2       	ldi	r26, 0x21	; 33
    1730:	1a 2e       	mov	r1, r26
    1732:	aa 1b       	sub	r26, r26
    1734:	bb 1b       	sub	r27, r27
    1736:	fd 01       	movw	r30, r26
    1738:	0d c0       	rjmp	.+26     	; 0x1754 <__udivmodsi4_ep>

0000173a <__udivmodsi4_loop>:
    173a:	aa 1f       	adc	r26, r26
    173c:	bb 1f       	adc	r27, r27
    173e:	ee 1f       	adc	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	a2 17       	cp	r26, r18
    1744:	b3 07       	cpc	r27, r19
    1746:	e4 07       	cpc	r30, r20
    1748:	f5 07       	cpc	r31, r21
    174a:	20 f0       	brcs	.+8      	; 0x1754 <__udivmodsi4_ep>
    174c:	a2 1b       	sub	r26, r18
    174e:	b3 0b       	sbc	r27, r19
    1750:	e4 0b       	sbc	r30, r20
    1752:	f5 0b       	sbc	r31, r21

00001754 <__udivmodsi4_ep>:
    1754:	66 1f       	adc	r22, r22
    1756:	77 1f       	adc	r23, r23
    1758:	88 1f       	adc	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	1a 94       	dec	r1
    175e:	69 f7       	brne	.-38     	; 0x173a <__udivmodsi4_loop>
    1760:	60 95       	com	r22
    1762:	70 95       	com	r23
    1764:	80 95       	com	r24
    1766:	90 95       	com	r25
    1768:	9b 01       	movw	r18, r22
    176a:	ac 01       	movw	r20, r24
    176c:	bd 01       	movw	r22, r26
    176e:	cf 01       	movw	r24, r30
    1770:	08 95       	ret

00001772 <__umulhisi3>:
    1772:	a2 9f       	mul	r26, r18
    1774:	b0 01       	movw	r22, r0
    1776:	b3 9f       	mul	r27, r19
    1778:	c0 01       	movw	r24, r0
    177a:	a3 9f       	mul	r26, r19
    177c:	70 0d       	add	r23, r0
    177e:	81 1d       	adc	r24, r1
    1780:	11 24       	eor	r1, r1
    1782:	91 1d       	adc	r25, r1
    1784:	b2 9f       	mul	r27, r18
    1786:	70 0d       	add	r23, r0
    1788:	81 1d       	adc	r24, r1
    178a:	11 24       	eor	r1, r1
    178c:	91 1d       	adc	r25, r1
    178e:	08 95       	ret

00001790 <_exit>:
    1790:	f8 94       	cli

00001792 <__stop_program>:
    1792:	ff cf       	rjmp	.-2      	; 0x1792 <__stop_program>
